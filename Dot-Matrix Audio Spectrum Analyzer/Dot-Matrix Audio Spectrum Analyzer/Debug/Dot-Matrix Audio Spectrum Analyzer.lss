
Dot-Matrix Audio Spectrum Analyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  00000a38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f6  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d38  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f16  00000000  00000000  00003d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016da  00000000  00000000  00005963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000703d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9e:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <system_init>
  aa:	08 95       	ret

000000ac <map>:
	};
}


float map(float value, float x_mn, float x_mx, float y_mn, float y_mx)
{
  ac:	4f 92       	push	r4
  ae:	5f 92       	push	r5
  b0:	6f 92       	push	r6
  b2:	7f 92       	push	r7
  b4:	af 92       	push	r10
  b6:	bf 92       	push	r11
  b8:	cf 92       	push	r12
  ba:	df 92       	push	r13
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2c 97       	sbiw	r28, 0x0c	; 12
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	6d 83       	std	Y+5, r22	; 0x05
  da:	7e 83       	std	Y+6, r23	; 0x06
  dc:	8f 83       	std	Y+7, r24	; 0x07
  de:	98 87       	std	Y+8, r25	; 0x08
  e0:	29 01       	movw	r4, r18
  e2:	3a 01       	movw	r6, r20
  e4:	e9 82       	std	Y+1, r14	; 0x01
  e6:	fa 82       	std	Y+2, r15	; 0x02
  e8:	0b 83       	std	Y+3, r16	; 0x03
  ea:	1c 83       	std	Y+4, r17	; 0x04
	return (y_mn + (((y_mx - y_mn) / (x_mx - x_mn)) * (value - x_mn)));
  ec:	a6 01       	movw	r20, r12
  ee:	95 01       	movw	r18, r10
  f0:	6d 8d       	ldd	r22, Y+29	; 0x1d
  f2:	7e 8d       	ldd	r23, Y+30	; 0x1e
  f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
  f6:	98 a1       	ldd	r25, Y+32	; 0x20
  f8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__subsf3>
  fc:	69 87       	std	Y+9, r22	; 0x09
  fe:	7a 87       	std	Y+10, r23	; 0x0a
 100:	8b 87       	std	Y+11, r24	; 0x0b
 102:	9c 87       	std	Y+12, r25	; 0x0c
 104:	a3 01       	movw	r20, r6
 106:	92 01       	movw	r18, r4
 108:	c8 01       	movw	r24, r16
 10a:	b7 01       	movw	r22, r14
 10c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__subsf3>
 110:	9b 01       	movw	r18, r22
 112:	ac 01       	movw	r20, r24
 114:	69 85       	ldd	r22, Y+9	; 0x09
 116:	7a 85       	ldd	r23, Y+10	; 0x0a
 118:	8b 85       	ldd	r24, Y+11	; 0x0b
 11a:	9c 85       	ldd	r25, Y+12	; 0x0c
 11c:	0e 94 44 03 	call	0x688	; 0x688 <__divsf3>
 120:	69 83       	std	Y+1, r22	; 0x01
 122:	7a 83       	std	Y+2, r23	; 0x02
 124:	8b 83       	std	Y+3, r24	; 0x03
 126:	9c 83       	std	Y+4, r25	; 0x04
 128:	a3 01       	movw	r20, r6
 12a:	92 01       	movw	r18, r4
 12c:	6d 81       	ldd	r22, Y+5	; 0x05
 12e:	7e 81       	ldd	r23, Y+6	; 0x06
 130:	8f 81       	ldd	r24, Y+7	; 0x07
 132:	98 85       	ldd	r25, Y+8	; 0x08
 134:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__subsf3>
 138:	9b 01       	movw	r18, r22
 13a:	ac 01       	movw	r20, r24
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	7a 81       	ldd	r23, Y+2	; 0x02
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	9c 81       	ldd	r25, Y+4	; 0x04
 144:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__mulsf3>
 148:	9b 01       	movw	r18, r22
 14a:	ac 01       	movw	r20, r24
 14c:	c6 01       	movw	r24, r12
 14e:	b5 01       	movw	r22, r10
 150:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__addsf3>
}
 154:	2c 96       	adiw	r28, 0x0c	; 12
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	7f 90       	pop	r7
 176:	6f 90       	pop	r6
 178:	5f 90       	pop	r5
 17a:	4f 90       	pop	r4
 17c:	08 95       	ret

0000017e <main>:
int main(void)
{
	unsigned char c = 0;
	unsigned char h = 0;
	
	atmel_start_init();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
	
	MSGEQ7_init();
 182:	0e 94 85 01 	call	0x30a	; 0x30a <MSGEQ7_init>
	TM1640_init(brightness_10_pc);
 186:	89 e8       	ldi	r24, 0x89	; 137
 188:	0e 94 25 02 	call	0x44a	; 0x44a <TM1640_init>

	while(1)
	{
		read_MSGEQ7();
 18c:	0e 94 a4 01 	call	0x348	; 0x348 <read_MSGEQ7>
		
		for(c = 0; c < 7; c++)
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	39 c0       	rjmp	.+114    	; 0x206 <main+0x88>
		{
			h = (unsigned char)map((float)spectrum_values[c], 0.0, 1023.0, 0.0, 7.0);
 194:	ed 2f       	mov	r30, r29
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e0 50       	subi	r30, 0x00	; 0
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	60 81       	ld	r22, Z
 1a2:	71 81       	ldd	r23, Z+1	; 0x01
 1a4:	07 2e       	mov	r0, r23
 1a6:	00 0c       	add	r0, r0
 1a8:	88 0b       	sbc	r24, r24
 1aa:	99 0b       	sbc	r25, r25
 1ac:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__floatsisf>
 1b0:	20 e4       	ldi	r18, 0x40	; 64
 1b2:	2f 93       	push	r18
 1b4:	20 ee       	ldi	r18, 0xE0	; 224
 1b6:	2f 93       	push	r18
 1b8:	1f 92       	push	r1
 1ba:	1f 92       	push	r1
 1bc:	a1 2c       	mov	r10, r1
 1be:	b1 2c       	mov	r11, r1
 1c0:	65 01       	movw	r12, r10
 1c2:	e1 2c       	mov	r14, r1
 1c4:	10 ec       	ldi	r17, 0xC0	; 192
 1c6:	f1 2e       	mov	r15, r17
 1c8:	0f e7       	ldi	r16, 0x7F	; 127
 1ca:	14 e4       	ldi	r17, 0x44	; 68
 1cc:	a6 01       	movw	r20, r12
 1ce:	95 01       	movw	r18, r10
 1d0:	0e 94 56 00 	call	0xac	; 0xac <map>
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0e 94 b6 03 	call	0x76c	; 0x76c <__fixunssfsi>
 1e0:	16 2f       	mov	r17, r22
			TM1640_draw_line((1 + (c * 2)), 0, (1 + (c * 2)), 7,  NO);
 1e2:	cd 2f       	mov	r28, r29
 1e4:	cc 0f       	add	r28, r28
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	27 e0       	ldi	r18, 0x07	; 7
 1ec:	4c 2f       	mov	r20, r28
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 5f 02 	call	0x4be	; 0x4be <TM1640_draw_line>
			TM1640_draw_line((1 + (c * 2)), 0, (1 + (c * 2)), h,  YES);
 1f6:	01 e0       	ldi	r16, 0x01	; 1
 1f8:	21 2f       	mov	r18, r17
 1fa:	4c 2f       	mov	r20, r28
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 5f 02 	call	0x4be	; 0x4be <TM1640_draw_line>

	while(1)
	{
		read_MSGEQ7();
		
		for(c = 0; c < 7; c++)
 204:	df 5f       	subi	r29, 0xFF	; 255
 206:	d7 30       	cpi	r29, 0x07	; 7
 208:	28 f2       	brcs	.-118    	; 0x194 <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	83 ef       	ldi	r24, 0xF3	; 243
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x92>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x9c>
 21a:	00 00       	nop
 21c:	b7 cf       	rjmp	.-146    	; 0x18c <main+0xe>

0000021e <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADCSRA &= ~(1 << ADEN);
 21e:	e4 e6       	ldi	r30, 0x64	; 100
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	80 83       	st	Z, r24
 228:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 22c:	82 e8       	ldi	r24, 0x82	; 130
 22e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 232:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	08 95       	ret

00000240 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADMUX &= ~0x0f;
 240:	ec e7       	ldi	r30, 0x7C	; 124
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	90 81       	ld	r25, Z
 246:	90 7f       	andi	r25, 0xF0	; 240
 248:	90 83       	st	Z, r25
	ADMUX |= channel;
 24a:	90 81       	ld	r25, Z
 24c:	89 2b       	or	r24, r25
 24e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 250:	ea e7       	ldi	r30, 0x7A	; 122
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return ((ADCSRA & (1 << ADIF)));
 25c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
}
 260:	82 95       	swap	r24
 262:	81 70       	andi	r24, 0x01	; 1
 264:	08 95       	ret

00000266 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADCL | ADCH << 8);
 266:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 26a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	98 2f       	mov	r25, r24
 272:	88 27       	eor	r24, r24
}
 274:	82 2b       	or	r24, r18
 276:	08 95       	ret

00000278 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
 278:	0e 94 20 01 	call	0x240	; 0x240 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
 27c:	0e 94 2e 01 	call	0x25c	; 0x25c <ADC_0_is_conversion_done>
 280:	88 23       	and	r24, r24
 282:	e1 f3       	breq	.-8      	; 0x27c <ADC_0_get_conversion+0x4>
		;
	res = ADC_0_get_conversion_result();
 284:	0e 94 33 01 	call	0x266	; 0x266 <ADC_0_get_conversion_result>
	ADCSRA |= (1 << ADIF);
 288:	ea e7       	ldi	r30, 0x7A	; 122
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	20 81       	ld	r18, Z
 28e:	20 61       	ori	r18, 0x10	; 16
 290:	20 83       	st	Z, r18
	return res;
}
 292:	08 95       	ret

00000294 <ADC_0_initialization>:
		DDRC &= ~(1 << pin);

		PORTC |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTC &= ~(1 << pin);
 294:	88 b1       	in	r24, 0x08	; 8
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	88 b9       	out	0x08, r24	; 8
{

	// Disable pull-up.
	MSGEQ7_OUT_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 29a:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_0_init>
 29e:	08 95       	ret

000002a0 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 2a0:	8f ee       	ldi	r24, 0xEF	; 239
 2a2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 2b0:	87 b1       	in	r24, 0x07	; 7
 2b2:	80 78       	andi	r24, 0x80	; 128
 2b4:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	8f 67       	ori	r24, 0x7F	; 127
 2ba:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 2bc:	8a b1       	in	r24, 0x0a	; 10
 2be:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	9b b9       	out	0x0b, r25	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 2c4:	84 b1       	in	r24, 0x04	; 4
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	85 b9       	out	0x05, r24	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 2dc:	87 b1       	in	r24, 0x07	; 7
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	88 b9       	out	0x08, r24	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
 2e8:	87 b1       	in	r24, 0x07	; 7
 2ea:	84 60       	ori	r24, 0x04	; 4
 2ec:	87 b9       	out	0x07, r24	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
 2ee:	88 b1       	in	r24, 0x08	; 8
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	88 b9       	out	0x08, r24	; 8
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	60 e8       	ldi	r22, 0x80	; 128
 2f8:	81 e6       	ldi	r24, 0x61	; 97
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 300:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 302:	15 be       	out	0x35, r1	; 53
	    // <true"> High
	    false);

	sysctrl_init();

	ADC_0_initialization();
 304:	0e 94 4a 01 	call	0x294	; 0x294 <ADC_0_initialization>
 308:	08 95       	ret

0000030a <MSGEQ7_init>:
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	88 b9       	out	0x08, r24	; 8
 310:	8f e9       	ldi	r24, 0x9F	; 159
 312:	9f e0       	ldi	r25, 0x0F	; 15
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <MSGEQ7_init+0xa>
 318:	00 c0       	rjmp	.+0      	; 0x31a <MSGEQ7_init+0x10>
 31a:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	88 b9       	out	0x08, r24	; 8
 322:	8f e9       	ldi	r24, 0x9F	; 159
 324:	9f e0       	ldi	r25, 0x0F	; 15
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <MSGEQ7_init+0x1c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <MSGEQ7_init+0x22>
 32c:	00 00       	nop
	} else {
		PORTC &= ~(1 << pin);
 32e:	88 b1       	in	r24, 0x08	; 8
 330:	8d 7f       	andi	r24, 0xFD	; 253
 332:	88 b9       	out	0x08, r24	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 334:	88 b1       	in	r24, 0x08	; 8
 336:	84 60       	ori	r24, 0x04	; 4
 338:	88 b9       	out	0x08, r24	; 8
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <MSGEQ7_init+0x34>
 342:	00 c0       	rjmp	.+0      	; 0x344 <MSGEQ7_init+0x3a>
 344:	00 00       	nop
 346:	08 95       	ret

00000348 <read_MSGEQ7>:
	_delay_ms(1);
}


void read_MSGEQ7(void)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29

	unsigned char s = 0;
	
	memset(spectrum_values, 0, sizeof(spectrum_values));
 34e:	8e e0       	ldi	r24, 0x0E	; 14
 350:	e0 e0       	ldi	r30, 0x00	; 0
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	df 01       	movw	r26, r30
 356:	1d 92       	st	X+, r1
 358:	8a 95       	dec	r24
 35a:	e9 f7       	brne	.-6      	; 0x356 <read_MSGEQ7+0xe>
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	88 b9       	out	0x08, r24	; 8
	} else {
		PORTC &= ~(1 << pin);
 362:	88 b1       	in	r24, 0x08	; 8
 364:	8d 7f       	andi	r24, 0xFD	; 253
 366:	88 b9       	out	0x08, r24	; 8
	
	MSGEQ7_RST_set_level(true);
	MSGEQ7_RST_set_level(false);

	for(s = 0; s < 7; s++)
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	1a c0       	rjmp	.+52     	; 0x3a0 <read_MSGEQ7+0x58>
 36c:	88 b1       	in	r24, 0x08	; 8
 36e:	8b 7f       	andi	r24, 0xFB	; 251
 370:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	ba e7       	ldi	r27, 0x7A	; 122
 374:	ba 95       	dec	r27
 376:	f1 f7       	brne	.-4      	; 0x374 <read_MSGEQ7+0x2c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <read_MSGEQ7+0x32>
	{
		MSGEQ7_STB_set_level(false);
		_delay_us(23);

		spectrum_values[s] = ADC_0_get_conversion(0);
 37a:	c1 2f       	mov	r28, r17
 37c:	d0 e0       	ldi	r29, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 3c 01 	call	0x278	; 0x278 <ADC_0_get_conversion>
 384:	cc 0f       	add	r28, r28
 386:	dd 1f       	adc	r29, r29
 388:	c0 50       	subi	r28, 0x00	; 0
 38a:	df 4f       	sbci	r29, 0xFF	; 255
 38c:	99 83       	std	Y+1, r25	; 0x01
 38e:	88 83       	st	Y, r24
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 390:	88 b1       	in	r24, 0x08	; 8
 392:	84 60       	ori	r24, 0x04	; 4
 394:	88 b9       	out	0x08, r24	; 8
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <read_MSGEQ7+0x50>
 39c:	00 00       	nop
	memset(spectrum_values, 0, sizeof(spectrum_values));
	
	MSGEQ7_RST_set_level(true);
	MSGEQ7_RST_set_level(false);

	for(s = 0; s < 7; s++)
 39e:	1f 5f       	subi	r17, 0xFF	; 255
 3a0:	17 30       	cpi	r17, 0x07	; 7
 3a2:	20 f3       	brcs	.-56     	; 0x36c <read_MSGEQ7+0x24>
		
		MSGEQ7_STB_set_level(true);
		_delay_us(1);
	}

 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 3ac:	2f b7       	in	r18, 0x3f	; 63
	cli
 3ae:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 3b0:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 3b2:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 3b4:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 3b6:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 3b8:	08 95       	ret

000003ba <TM1640_write>:
}


void TM1640_write(unsigned char value)
{
	unsigned char s = 0x08;
 3ba:	28 e0       	ldi	r18, 0x08	; 8

	while(s > 0x00)
 3bc:	11 c0       	rjmp	.+34     	; 0x3e0 <TM1640_write+0x26>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 3be:	95 b1       	in	r25, 0x05	; 5
 3c0:	9d 7f       	andi	r25, 0xFD	; 253
 3c2:	95 b9       	out	0x05, r25	; 5
	{
		TM1640_CLK_set_level(false);

		if((value & 0x01))
 3c4:	80 ff       	sbrs	r24, 0
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <TM1640_write+0x16>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 3c8:	95 b1       	in	r25, 0x05	; 5
 3ca:	91 60       	ori	r25, 0x01	; 1
 3cc:	95 b9       	out	0x05, r25	; 5
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <TM1640_write+0x1c>
	} else {
		PORTB &= ~(1 << pin);
 3d0:	95 b1       	in	r25, 0x05	; 5
 3d2:	9e 7f       	andi	r25, 0xFE	; 254
 3d4:	95 b9       	out	0x05, r25	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 3d6:	95 b1       	in	r25, 0x05	; 5
 3d8:	92 60       	ori	r25, 0x02	; 2
 3da:	95 b9       	out	0x05, r25	; 5
			TM1640_DIN_set_level(false);
		}

		TM1640_CLK_set_level(true);

		value >>= 0x01;
 3dc:	86 95       	lsr	r24
		s--;
 3de:	21 50       	subi	r18, 0x01	; 1

void TM1640_write(unsigned char value)
{
	unsigned char s = 0x08;

	while(s > 0x00)
 3e0:	21 11       	cpse	r18, r1
 3e2:	ed cf       	rjmp	.-38     	; 0x3be <TM1640_write+0x4>
		TM1640_CLK_set_level(true);

		value >>= 0x01;
		s--;
	}
}
 3e4:	08 95       	ret

000003e6 <TM1640_send_command>:
	} else {
		PORTB &= ~(1 << pin);
 3e6:	95 b1       	in	r25, 0x05	; 5
 3e8:	9e 7f       	andi	r25, 0xFE	; 254
 3ea:	95 b9       	out	0x05, r25	; 5


void TM1640_send_command(unsigned char value)
{
	TM1640_DIN_set_level(false);
	TM1640_write(value);
 3ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TM1640_write>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 3f0:	85 b1       	in	r24, 0x05	; 5
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	85 b9       	out	0x05, r24	; 5
 3f6:	08 95       	ret

000003f8 <TM1640_send_data>:
	TM1640_DIN_set_level(true);
}


void TM1640_send_data(unsigned char address, unsigned char value)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	c8 2f       	mov	r28, r24
 3fe:	d6 2f       	mov	r29, r22
	TM1640_send_command(fixed_address);
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TM1640_send_command>
	} else {
		PORTB &= ~(1 << pin);
 406:	85 b1       	in	r24, 0x05	; 5
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	85 b9       	out	0x05, r24	; 5
	TM1640_DIN_set_level(false);
	TM1640_write((start_address | (0x0F & address)));
 40c:	8c 2f       	mov	r24, r28
 40e:	8f 70       	andi	r24, 0x0F	; 15
 410:	80 6c       	ori	r24, 0xC0	; 192
 412:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TM1640_write>
	TM1640_write(value);
 416:	8d 2f       	mov	r24, r29
 418:	0e 94 dd 01 	call	0x3ba	; 0x3ba <TM1640_write>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	85 b9       	out	0x05, r24	; 5
	TM1640_DIN_set_level(true);
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <TM1640_clear_display>:


void TM1640_clear_display(void)
{
 428:	cf 93       	push	r28
	unsigned char s = 0x10;
 42a:	c0 e1       	ldi	r28, 0x10	; 16

	while(s > 0)
 42c:	0a c0       	rjmp	.+20     	; 0x442 <TM1640_clear_display+0x1a>
	{
		buffer[s] = 0x00;
 42e:	ec 2f       	mov	r30, r28
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	e2 5f       	subi	r30, 0xF2	; 242
 434:	fe 4f       	sbci	r31, 0xFE	; 254
 436:	10 82       	st	Z, r1
		TM1640_send_data(s, 0x00);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	8c 2f       	mov	r24, r28
 43c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TM1640_send_data>
		s--;
 440:	c1 50       	subi	r28, 0x01	; 1

void TM1640_clear_display(void)
{
	unsigned char s = 0x10;

	while(s > 0)
 442:	c1 11       	cpse	r28, r1
 444:	f4 cf       	rjmp	.-24     	; 0x42e <TM1640_clear_display+0x6>
	{
		buffer[s] = 0x00;
		TM1640_send_data(s, 0x00);
		s--;
	}
}
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <TM1640_init>:
#include "TM1640.h"
#include "fonts.h"


void TM1640_init(unsigned char brightness_level)
{
 44a:	cf 93       	push	r28
 44c:	c8 2f       	mov	r28, r24
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	81 60       	ori	r24, 0x01	; 1
 452:	85 b9       	out	0x05, r24	; 5
 454:	85 b1       	in	r24, 0x05	; 5
 456:	82 60       	ori	r24, 0x02	; 2
 458:	85 b9       	out	0x05, r24	; 5
	TM1640_DIN_set_level(true);
	TM1640_CLK_set_level(true);

	TM1640_send_command(auto_address);
 45a:	80 e4       	ldi	r24, 0x40	; 64
 45c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TM1640_send_command>
	TM1640_send_command(brightness_level);
 460:	8c 2f       	mov	r24, r28
 462:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TM1640_send_command>
	TM1640_clear_display();
 466:	0e 94 14 02 	call	0x428	; 0x428 <TM1640_clear_display>
}
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <TM1640_draw_pixel>:
}


void TM1640_draw_pixel(unsigned char x_pos, unsigned char y_pos, unsigned char state)
{
	switch(state)
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	79 f4       	brne	.+30     	; 0x490 <TM1640_draw_pixel+0x22>
	{
		case ON:
		{
			bit_set(buffer[x_pos], y_pos);
 472:	e8 2f       	mov	r30, r24
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <TM1640_draw_pixel+0x12>
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <TM1640_draw_pixel+0xe>
 484:	e2 5f       	subi	r30, 0xF2	; 242
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	90 81       	ld	r25, Z
 48a:	29 2b       	or	r18, r25
 48c:	20 83       	st	Z, r18
			break;
 48e:	0f c0       	rjmp	.+30     	; 0x4ae <TM1640_draw_pixel+0x40>
		}
		
		default:
		{
			bit_clr(buffer[x_pos], y_pos);
 490:	e8 2f       	mov	r30, r24
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <TM1640_draw_pixel+0x30>
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <TM1640_draw_pixel+0x2c>
 4a2:	e2 5f       	subi	r30, 0xF2	; 242
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	20 95       	com	r18
 4a8:	90 81       	ld	r25, Z
 4aa:	29 23       	and	r18, r25
 4ac:	20 83       	st	Z, r18
			break;
		}
	}
	
	TM1640_send_data(x_pos, buffer[x_pos]);
 4ae:	e8 2f       	mov	r30, r24
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	e2 5f       	subi	r30, 0xF2	; 242
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	60 81       	ld	r22, Z
 4b8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TM1640_send_data>
 4bc:	08 95       	ret

000004be <TM1640_draw_line>:
}


void TM1640_draw_line(signed char x1, signed char y1, signed char x2, signed char y2, unsigned char colour)
{
 4be:	7f 92       	push	r7
 4c0:	8f 92       	push	r8
 4c2:	9f 92       	push	r9
 4c4:	af 92       	push	r10
 4c6:	bf 92       	push	r11
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	c8 2f       	mov	r28, r24
 4da:	d6 2f       	mov	r29, r22
 4dc:	74 2e       	mov	r7, r20
 4de:	82 2e       	mov	r8, r18
	signed int dy = 0x0000;
	signed int stepx = 0x0000;
	signed int stepy = 0x0000;
	signed int fraction = 0x0000;

	dy = (y2 - y1);
 4e0:	a2 2e       	mov	r10, r18
 4e2:	22 0f       	add	r18, r18
 4e4:	bb 08       	sbc	r11, r11
 4e6:	a6 1a       	sub	r10, r22
 4e8:	b1 08       	sbc	r11, r1
 4ea:	67 fd       	sbrc	r22, 7
 4ec:	b3 94       	inc	r11
	dx = (x2 - x1);
 4ee:	c4 2e       	mov	r12, r20
 4f0:	44 0f       	add	r20, r20
 4f2:	dd 08       	sbc	r13, r13
 4f4:	c8 1a       	sub	r12, r24
 4f6:	d1 08       	sbc	r13, r1
 4f8:	87 fd       	sbrc	r24, 7
 4fa:	d3 94       	inc	r13

	if (dy < 0)
 4fc:	bb 20       	and	r11, r11
 4fe:	34 f4       	brge	.+12     	; 0x50c <TM1640_draw_line+0x4e>
	{
		dy = -dy;
 500:	b1 94       	neg	r11
 502:	a1 94       	neg	r10
 504:	b1 08       	sbc	r11, r1
		stepy = -1;
 506:	99 24       	eor	r9, r9
 508:	9a 94       	dec	r9
 50a:	02 c0       	rjmp	.+4      	; 0x510 <TM1640_draw_line+0x52>
	}
	else
	{
		stepy = 1;
 50c:	99 24       	eor	r9, r9
 50e:	93 94       	inc	r9
	}

	if (dx < 0)
 510:	dd 20       	and	r13, r13
 512:	2c f4       	brge	.+10     	; 0x51e <TM1640_draw_line+0x60>
	{
		dx = -dx;
 514:	d1 94       	neg	r13
 516:	c1 94       	neg	r12
 518:	d1 08       	sbc	r13, r1
		stepx = -1;
 51a:	1f ef       	ldi	r17, 0xFF	; 255
 51c:	01 c0       	rjmp	.+2      	; 0x520 <TM1640_draw_line+0x62>
	}
	else
	{
		stepx = 1;
 51e:	11 e0       	ldi	r17, 0x01	; 1
	}

	dx <<= 1;
 520:	cc 0c       	add	r12, r12
 522:	dd 1c       	adc	r13, r13
	dy <<= 1;
 524:	aa 0c       	add	r10, r10
 526:	bb 1c       	adc	r11, r11

	TM1640_draw_pixel(x1, y1, colour);
 528:	40 2f       	mov	r20, r16
 52a:	6d 2f       	mov	r22, r29
 52c:	8c 2f       	mov	r24, r28
 52e:	0e 94 37 02 	call	0x46e	; 0x46e <TM1640_draw_pixel>

	if(dx > dy)
 532:	ac 14       	cp	r10, r12
 534:	bd 04       	cpc	r11, r13
 536:	bc f4       	brge	.+46     	; 0x566 <TM1640_draw_line+0xa8>
	{
		fraction = (dy - (dx >> 1));
 538:	c6 01       	movw	r24, r12
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	75 01       	movw	r14, r10
 540:	e8 1a       	sub	r14, r24
 542:	f9 0a       	sbc	r15, r25
		while (x1 != x2)
 544:	0d c0       	rjmp	.+26     	; 0x560 <TM1640_draw_line+0xa2>
		{
			if(fraction >= 0)
 546:	ff 20       	and	r15, r15
 548:	1c f0       	brlt	.+6      	; 0x550 <TM1640_draw_line+0x92>
			{
				y1 += stepy;
 54a:	d9 0d       	add	r29, r9
				fraction -= dx;
 54c:	ec 18       	sub	r14, r12
 54e:	fd 08       	sbc	r15, r13
			}

			x1 += stepx;
 550:	c1 0f       	add	r28, r17
			fraction += dy;
 552:	ea 0c       	add	r14, r10
 554:	fb 1c       	adc	r15, r11

			TM1640_draw_pixel(x1, y1, colour);
 556:	40 2f       	mov	r20, r16
 558:	6d 2f       	mov	r22, r29
 55a:	8c 2f       	mov	r24, r28
 55c:	0e 94 37 02 	call	0x46e	; 0x46e <TM1640_draw_pixel>
	TM1640_draw_pixel(x1, y1, colour);

	if(dx > dy)
	{
		fraction = (dy - (dx >> 1));
		while (x1 != x2)
 560:	c7 11       	cpse	r28, r7
 562:	f1 cf       	rjmp	.-30     	; 0x546 <TM1640_draw_line+0x88>
 564:	16 c0       	rjmp	.+44     	; 0x592 <TM1640_draw_line+0xd4>
			TM1640_draw_pixel(x1, y1, colour);
		}
	}
	else
	{
		fraction = (dx - (dy >> 1));
 566:	c5 01       	movw	r24, r10
 568:	95 95       	asr	r25
 56a:	87 95       	ror	r24
 56c:	76 01       	movw	r14, r12
 56e:	e8 1a       	sub	r14, r24
 570:	f9 0a       	sbc	r15, r25
		while (y1 != y2)
 572:	0d c0       	rjmp	.+26     	; 0x58e <TM1640_draw_line+0xd0>
		{
			if (fraction >= 0)
 574:	ff 20       	and	r15, r15
 576:	1c f0       	brlt	.+6      	; 0x57e <TM1640_draw_line+0xc0>
			{
				x1 += stepx;
 578:	c1 0f       	add	r28, r17
				fraction -= dy;
 57a:	ea 18       	sub	r14, r10
 57c:	fb 08       	sbc	r15, r11
			}

			y1 += stepy;
 57e:	d9 0d       	add	r29, r9
			fraction += dx;
 580:	ec 0c       	add	r14, r12
 582:	fd 1c       	adc	r15, r13

			TM1640_draw_pixel(x1, y1, colour);
 584:	40 2f       	mov	r20, r16
 586:	6d 2f       	mov	r22, r29
 588:	8c 2f       	mov	r24, r28
 58a:	0e 94 37 02 	call	0x46e	; 0x46e <TM1640_draw_pixel>
		}
	}
	else
	{
		fraction = (dx - (dy >> 1));
		while (y1 != y2)
 58e:	d8 11       	cpse	r29, r8
 590:	f1 cf       	rjmp	.-30     	; 0x574 <TM1640_draw_line+0xb6>
			fraction += dx;

			TM1640_draw_pixel(x1, y1, colour);
		}
	}
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	af 90       	pop	r10
 5a6:	9f 90       	pop	r9
 5a8:	8f 90       	pop	r8
 5aa:	7f 90       	pop	r7
 5ac:	08 95       	ret

000005ae <__subsf3>:
 5ae:	50 58       	subi	r21, 0x80	; 128

000005b0 <__addsf3>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	aa 27       	eor	r26, r26
 5b4:	0e 94 ef 02 	call	0x5de	; 0x5de <__addsf3x>
 5b8:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 5bc:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__addsf3+0x20>
 5c2:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__addsf3+0x20>
 5c8:	39 f4       	brne	.+14     	; 0x5d8 <__addsf3+0x28>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	19 f4       	brne	.+6      	; 0x5d4 <__addsf3+0x24>
 5ce:	26 f4       	brtc	.+8      	; 0x5d8 <__addsf3+0x28>
 5d0:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 5d4:	0e f4       	brtc	.+2      	; 0x5d8 <__addsf3+0x28>
 5d6:	e0 95       	com	r30
 5d8:	e7 fb       	bst	r30, 7
 5da:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>

000005de <__addsf3x>:
 5de:	e9 2f       	mov	r30, r25
 5e0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 5e4:	58 f3       	brcs	.-42     	; 0x5bc <__addsf3+0xc>
 5e6:	ba 17       	cp	r27, r26
 5e8:	62 07       	cpc	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	95 07       	cpc	r25, r21
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__addsf3x+0x1c>
 5f2:	79 f4       	brne	.+30     	; 0x612 <__addsf3x+0x34>
 5f4:	a6 f5       	brtc	.+104    	; 0x65e <__addsf3x+0x80>
 5f6:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 5fa:	0e f4       	brtc	.+2      	; 0x5fe <__addsf3x+0x20>
 5fc:	e0 95       	com	r30
 5fe:	0b 2e       	mov	r0, r27
 600:	ba 2f       	mov	r27, r26
 602:	a0 2d       	mov	r26, r0
 604:	0b 01       	movw	r0, r22
 606:	b9 01       	movw	r22, r18
 608:	90 01       	movw	r18, r0
 60a:	0c 01       	movw	r0, r24
 60c:	ca 01       	movw	r24, r20
 60e:	a0 01       	movw	r20, r0
 610:	11 24       	eor	r1, r1
 612:	ff 27       	eor	r31, r31
 614:	59 1b       	sub	r21, r25
 616:	99 f0       	breq	.+38     	; 0x63e <__addsf3x+0x60>
 618:	59 3f       	cpi	r21, 0xF9	; 249
 61a:	50 f4       	brcc	.+20     	; 0x630 <__addsf3x+0x52>
 61c:	50 3e       	cpi	r21, 0xE0	; 224
 61e:	68 f1       	brcs	.+90     	; 0x67a <__addsf3x+0x9c>
 620:	1a 16       	cp	r1, r26
 622:	f0 40       	sbci	r31, 0x00	; 0
 624:	a2 2f       	mov	r26, r18
 626:	23 2f       	mov	r18, r19
 628:	34 2f       	mov	r19, r20
 62a:	44 27       	eor	r20, r20
 62c:	58 5f       	subi	r21, 0xF8	; 248
 62e:	f3 cf       	rjmp	.-26     	; 0x616 <__addsf3x+0x38>
 630:	46 95       	lsr	r20
 632:	37 95       	ror	r19
 634:	27 95       	ror	r18
 636:	a7 95       	ror	r26
 638:	f0 40       	sbci	r31, 0x00	; 0
 63a:	53 95       	inc	r21
 63c:	c9 f7       	brne	.-14     	; 0x630 <__addsf3x+0x52>
 63e:	7e f4       	brtc	.+30     	; 0x65e <__addsf3x+0x80>
 640:	1f 16       	cp	r1, r31
 642:	ba 0b       	sbc	r27, r26
 644:	62 0b       	sbc	r22, r18
 646:	73 0b       	sbc	r23, r19
 648:	84 0b       	sbc	r24, r20
 64a:	ba f0       	brmi	.+46     	; 0x67a <__addsf3x+0x9c>
 64c:	91 50       	subi	r25, 0x01	; 1
 64e:	a1 f0       	breq	.+40     	; 0x678 <__addsf3x+0x9a>
 650:	ff 0f       	add	r31, r31
 652:	bb 1f       	adc	r27, r27
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	c2 f7       	brpl	.-16     	; 0x64c <__addsf3x+0x6e>
 65c:	0e c0       	rjmp	.+28     	; 0x67a <__addsf3x+0x9c>
 65e:	ba 0f       	add	r27, r26
 660:	62 1f       	adc	r22, r18
 662:	73 1f       	adc	r23, r19
 664:	84 1f       	adc	r24, r20
 666:	48 f4       	brcc	.+18     	; 0x67a <__addsf3x+0x9c>
 668:	87 95       	ror	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f7 95       	ror	r31
 672:	9e 3f       	cpi	r25, 0xFE	; 254
 674:	08 f0       	brcs	.+2      	; 0x678 <__addsf3x+0x9a>
 676:	b0 cf       	rjmp	.-160    	; 0x5d8 <__addsf3+0x28>
 678:	93 95       	inc	r25
 67a:	88 0f       	add	r24, r24
 67c:	08 f0       	brcs	.+2      	; 0x680 <__addsf3x+0xa2>
 67e:	99 27       	eor	r25, r25
 680:	ee 0f       	add	r30, r30
 682:	97 95       	ror	r25
 684:	87 95       	ror	r24
 686:	08 95       	ret

00000688 <__divsf3>:
 688:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divsf3x>
 68c:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 690:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 694:	58 f0       	brcs	.+22     	; 0x6ac <__divsf3+0x24>
 696:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 69a:	40 f0       	brcs	.+16     	; 0x6ac <__divsf3+0x24>
 69c:	29 f4       	brne	.+10     	; 0x6a8 <__divsf3+0x20>
 69e:	5f 3f       	cpi	r21, 0xFF	; 255
 6a0:	29 f0       	breq	.+10     	; 0x6ac <__divsf3+0x24>
 6a2:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 6a6:	51 11       	cpse	r21, r1
 6a8:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 6ac:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>

000006b0 <__divsf3x>:
 6b0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 6b4:	68 f3       	brcs	.-38     	; 0x690 <__divsf3+0x8>

000006b6 <__divsf3_pse>:
 6b6:	99 23       	and	r25, r25
 6b8:	b1 f3       	breq	.-20     	; 0x6a6 <__divsf3+0x1e>
 6ba:	55 23       	and	r21, r21
 6bc:	91 f3       	breq	.-28     	; 0x6a2 <__divsf3+0x1a>
 6be:	95 1b       	sub	r25, r21
 6c0:	55 0b       	sbc	r21, r21
 6c2:	bb 27       	eor	r27, r27
 6c4:	aa 27       	eor	r26, r26
 6c6:	62 17       	cp	r22, r18
 6c8:	73 07       	cpc	r23, r19
 6ca:	84 07       	cpc	r24, r20
 6cc:	38 f0       	brcs	.+14     	; 0x6dc <__divsf3_pse+0x26>
 6ce:	9f 5f       	subi	r25, 0xFF	; 255
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	22 0f       	add	r18, r18
 6d4:	33 1f       	adc	r19, r19
 6d6:	44 1f       	adc	r20, r20
 6d8:	aa 1f       	adc	r26, r26
 6da:	a9 f3       	breq	.-22     	; 0x6c6 <__divsf3_pse+0x10>
 6dc:	35 d0       	rcall	.+106    	; 0x748 <__divsf3_pse+0x92>
 6de:	0e 2e       	mov	r0, r30
 6e0:	3a f0       	brmi	.+14     	; 0x6f0 <__divsf3_pse+0x3a>
 6e2:	e0 e8       	ldi	r30, 0x80	; 128
 6e4:	32 d0       	rcall	.+100    	; 0x74a <__divsf3_pse+0x94>
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	e6 95       	lsr	r30
 6ec:	00 1c       	adc	r0, r0
 6ee:	ca f7       	brpl	.-14     	; 0x6e2 <__divsf3_pse+0x2c>
 6f0:	2b d0       	rcall	.+86     	; 0x748 <__divsf3_pse+0x92>
 6f2:	fe 2f       	mov	r31, r30
 6f4:	29 d0       	rcall	.+82     	; 0x748 <__divsf3_pse+0x92>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	bb 1f       	adc	r27, r27
 6fe:	26 17       	cp	r18, r22
 700:	37 07       	cpc	r19, r23
 702:	48 07       	cpc	r20, r24
 704:	ab 07       	cpc	r26, r27
 706:	b0 e8       	ldi	r27, 0x80	; 128
 708:	09 f0       	breq	.+2      	; 0x70c <__divsf3_pse+0x56>
 70a:	bb 0b       	sbc	r27, r27
 70c:	80 2d       	mov	r24, r0
 70e:	bf 01       	movw	r22, r30
 710:	ff 27       	eor	r31, r31
 712:	93 58       	subi	r25, 0x83	; 131
 714:	5f 4f       	sbci	r21, 0xFF	; 255
 716:	3a f0       	brmi	.+14     	; 0x726 <__divsf3_pse+0x70>
 718:	9e 3f       	cpi	r25, 0xFE	; 254
 71a:	51 05       	cpc	r21, r1
 71c:	78 f0       	brcs	.+30     	; 0x73c <__divsf3_pse+0x86>
 71e:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 722:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 726:	5f 3f       	cpi	r21, 0xFF	; 255
 728:	e4 f3       	brlt	.-8      	; 0x722 <__divsf3_pse+0x6c>
 72a:	98 3e       	cpi	r25, 0xE8	; 232
 72c:	d4 f3       	brlt	.-12     	; 0x722 <__divsf3_pse+0x6c>
 72e:	86 95       	lsr	r24
 730:	77 95       	ror	r23
 732:	67 95       	ror	r22
 734:	b7 95       	ror	r27
 736:	f7 95       	ror	r31
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	c9 f7       	brne	.-14     	; 0x72e <__divsf3_pse+0x78>
 73c:	88 0f       	add	r24, r24
 73e:	91 1d       	adc	r25, r1
 740:	96 95       	lsr	r25
 742:	87 95       	ror	r24
 744:	97 f9       	bld	r25, 7
 746:	08 95       	ret
 748:	e1 e0       	ldi	r30, 0x01	; 1
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	bb 1f       	adc	r27, r27
 752:	62 17       	cp	r22, r18
 754:	73 07       	cpc	r23, r19
 756:	84 07       	cpc	r24, r20
 758:	ba 07       	cpc	r27, r26
 75a:	20 f0       	brcs	.+8      	; 0x764 <__divsf3_pse+0xae>
 75c:	62 1b       	sub	r22, r18
 75e:	73 0b       	sbc	r23, r19
 760:	84 0b       	sbc	r24, r20
 762:	ba 0b       	sbc	r27, r26
 764:	ee 1f       	adc	r30, r30
 766:	88 f7       	brcc	.-30     	; 0x74a <__divsf3_pse+0x94>
 768:	e0 95       	com	r30
 76a:	08 95       	ret

0000076c <__fixunssfsi>:
 76c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fp_splitA>
 770:	88 f0       	brcs	.+34     	; 0x794 <__fixunssfsi+0x28>
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	98 f0       	brcs	.+38     	; 0x79c <__fixunssfsi+0x30>
 776:	b9 2f       	mov	r27, r25
 778:	99 27       	eor	r25, r25
 77a:	b7 51       	subi	r27, 0x17	; 23
 77c:	b0 f0       	brcs	.+44     	; 0x7aa <__fixunssfsi+0x3e>
 77e:	e1 f0       	breq	.+56     	; 0x7b8 <__fixunssfsi+0x4c>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	1a f0       	brmi	.+6      	; 0x790 <__fixunssfsi+0x24>
 78a:	ba 95       	dec	r27
 78c:	c9 f7       	brne	.-14     	; 0x780 <__fixunssfsi+0x14>
 78e:	14 c0       	rjmp	.+40     	; 0x7b8 <__fixunssfsi+0x4c>
 790:	b1 30       	cpi	r27, 0x01	; 1
 792:	91 f0       	breq	.+36     	; 0x7b8 <__fixunssfsi+0x4c>
 794:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_zero>
 798:	b1 e0       	ldi	r27, 0x01	; 1
 79a:	08 95       	ret
 79c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_zero>
 7a0:	67 2f       	mov	r22, r23
 7a2:	78 2f       	mov	r23, r24
 7a4:	88 27       	eor	r24, r24
 7a6:	b8 5f       	subi	r27, 0xF8	; 248
 7a8:	39 f0       	breq	.+14     	; 0x7b8 <__fixunssfsi+0x4c>
 7aa:	b9 3f       	cpi	r27, 0xF9	; 249
 7ac:	cc f3       	brlt	.-14     	; 0x7a0 <__fixunssfsi+0x34>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b3 95       	inc	r27
 7b6:	d9 f7       	brne	.-10     	; 0x7ae <__fixunssfsi+0x42>
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__fixunssfsi+0x5c>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__floatunsisf>:
 7ca:	e8 94       	clt
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <__floatsisf+0x12>

000007ce <__floatsisf>:
 7ce:	97 fb       	bst	r25, 7
 7d0:	3e f4       	brtc	.+14     	; 0x7e0 <__floatsisf+0x12>
 7d2:	90 95       	com	r25
 7d4:	80 95       	com	r24
 7d6:	70 95       	com	r23
 7d8:	61 95       	neg	r22
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	99 23       	and	r25, r25
 7e2:	a9 f0       	breq	.+42     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e4:	f9 2f       	mov	r31, r25
 7e6:	96 e9       	ldi	r25, 0x96	; 150
 7e8:	bb 27       	eor	r27, r27
 7ea:	93 95       	inc	r25
 7ec:	f6 95       	lsr	r31
 7ee:	87 95       	ror	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f1 11       	cpse	r31, r1
 7f8:	f8 cf       	rjmp	.-16     	; 0x7ea <__floatsisf+0x1c>
 7fa:	fa f4       	brpl	.+62     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 7fc:	bb 0f       	add	r27, r27
 7fe:	11 f4       	brne	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	60 ff       	sbrs	r22, 0
 802:	1b c0       	rjmp	.+54     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 80e:	88 23       	and	r24, r24
 810:	11 f0       	breq	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	96 e9       	ldi	r25, 0x96	; 150
 814:	11 c0       	rjmp	.+34     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 816:	77 23       	and	r23, r23
 818:	21 f0       	breq	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81a:	9e e8       	ldi	r25, 0x8E	; 142
 81c:	87 2f       	mov	r24, r23
 81e:	76 2f       	mov	r23, r22
 820:	05 c0       	rjmp	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 822:	66 23       	and	r22, r22
 824:	71 f0       	breq	.+28     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 826:	96 e8       	ldi	r25, 0x86	; 134
 828:	86 2f       	mov	r24, r22
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	60 e0       	ldi	r22, 0x00	; 0
 82e:	2a f0       	brmi	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 830:	9a 95       	dec	r25
 832:	66 0f       	add	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	da f7       	brpl	.-10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 83a:	88 0f       	add	r24, r24
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__fp_inf>:
 844:	97 f9       	bld	r25, 7
 846:	9f 67       	ori	r25, 0x7F	; 127
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	08 95       	ret

00000850 <__fp_nan>:
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	80 ec       	ldi	r24, 0xC0	; 192
 854:	08 95       	ret

00000856 <__fp_pscA>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	09 06       	cpc	r0, r25
 862:	08 95       	ret

00000864 <__fp_pscB>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	05 06       	cpc	r0, r21
 870:	08 95       	ret

00000872 <__fp_round>:
 872:	09 2e       	mov	r0, r25
 874:	03 94       	inc	r0
 876:	00 0c       	add	r0, r0
 878:	11 f4       	brne	.+4      	; 0x87e <__fp_round+0xc>
 87a:	88 23       	and	r24, r24
 87c:	52 f0       	brmi	.+20     	; 0x892 <__fp_round+0x20>
 87e:	bb 0f       	add	r27, r27
 880:	40 f4       	brcc	.+16     	; 0x892 <__fp_round+0x20>
 882:	bf 2b       	or	r27, r31
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0x18>
 886:	60 ff       	sbrs	r22, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__fp_round+0x20>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <__fp_split3>:
 894:	57 fd       	sbrc	r21, 7
 896:	90 58       	subi	r25, 0x80	; 128
 898:	44 0f       	add	r20, r20
 89a:	55 1f       	adc	r21, r21
 89c:	59 f0       	breq	.+22     	; 0x8b4 <__fp_splitA+0x10>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	71 f0       	breq	.+28     	; 0x8be <__fp_splitA+0x1a>
 8a2:	47 95       	ror	r20

000008a4 <__fp_splitA>:
 8a4:	88 0f       	add	r24, r24
 8a6:	97 fb       	bst	r25, 7
 8a8:	99 1f       	adc	r25, r25
 8aa:	61 f0       	breq	.+24     	; 0x8c4 <__fp_splitA+0x20>
 8ac:	9f 3f       	cpi	r25, 0xFF	; 255
 8ae:	79 f0       	breq	.+30     	; 0x8ce <__fp_splitA+0x2a>
 8b0:	87 95       	ror	r24
 8b2:	08 95       	ret
 8b4:	12 16       	cp	r1, r18
 8b6:	13 06       	cpc	r1, r19
 8b8:	14 06       	cpc	r1, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	f2 cf       	rjmp	.-28     	; 0x8a2 <__fp_split3+0xe>
 8be:	46 95       	lsr	r20
 8c0:	f1 df       	rcall	.-30     	; 0x8a4 <__fp_splitA>
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <__fp_splitA+0x30>
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	f1 cf       	rjmp	.-30     	; 0x8b0 <__fp_splitA+0xc>
 8ce:	86 95       	lsr	r24
 8d0:	71 05       	cpc	r23, r1
 8d2:	61 05       	cpc	r22, r1
 8d4:	08 94       	sec
 8d6:	08 95       	ret

000008d8 <__fp_zero>:
 8d8:	e8 94       	clt

000008da <__fp_szero>:
 8da:	bb 27       	eor	r27, r27
 8dc:	66 27       	eor	r22, r22
 8de:	77 27       	eor	r23, r23
 8e0:	cb 01       	movw	r24, r22
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__mulsf3>:
 8e6:	0e 94 86 04 	call	0x90c	; 0x90c <__mulsf3x>
 8ea:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 8ee:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 8f2:	38 f0       	brcs	.+14     	; 0x902 <__stack+0x3>
 8f4:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__stack+0x3>
 8fa:	95 23       	and	r25, r21
 8fc:	11 f0       	breq	.+4      	; 0x902 <__stack+0x3>
 8fe:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 902:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 906:	11 24       	eor	r1, r1
 908:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>

0000090c <__mulsf3x>:
 90c:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_split3>
 910:	70 f3       	brcs	.-36     	; 0x8ee <__mulsf3+0x8>

00000912 <__mulsf3_pse>:
 912:	95 9f       	mul	r25, r21
 914:	c1 f3       	breq	.-16     	; 0x906 <__stack+0x7>
 916:	95 0f       	add	r25, r21
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	55 1f       	adc	r21, r21
 91c:	62 9f       	mul	r22, r18
 91e:	f0 01       	movw	r30, r0
 920:	72 9f       	mul	r23, r18
 922:	bb 27       	eor	r27, r27
 924:	f0 0d       	add	r31, r0
 926:	b1 1d       	adc	r27, r1
 928:	63 9f       	mul	r22, r19
 92a:	aa 27       	eor	r26, r26
 92c:	f0 0d       	add	r31, r0
 92e:	b1 1d       	adc	r27, r1
 930:	aa 1f       	adc	r26, r26
 932:	64 9f       	mul	r22, r20
 934:	66 27       	eor	r22, r22
 936:	b0 0d       	add	r27, r0
 938:	a1 1d       	adc	r26, r1
 93a:	66 1f       	adc	r22, r22
 93c:	82 9f       	mul	r24, r18
 93e:	22 27       	eor	r18, r18
 940:	b0 0d       	add	r27, r0
 942:	a1 1d       	adc	r26, r1
 944:	62 1f       	adc	r22, r18
 946:	73 9f       	mul	r23, r19
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	62 1f       	adc	r22, r18
 94e:	83 9f       	mul	r24, r19
 950:	a0 0d       	add	r26, r0
 952:	61 1d       	adc	r22, r1
 954:	22 1f       	adc	r18, r18
 956:	74 9f       	mul	r23, r20
 958:	33 27       	eor	r19, r19
 95a:	a0 0d       	add	r26, r0
 95c:	61 1d       	adc	r22, r1
 95e:	23 1f       	adc	r18, r19
 960:	84 9f       	mul	r24, r20
 962:	60 0d       	add	r22, r0
 964:	21 1d       	adc	r18, r1
 966:	82 2f       	mov	r24, r18
 968:	76 2f       	mov	r23, r22
 96a:	6a 2f       	mov	r22, r26
 96c:	11 24       	eor	r1, r1
 96e:	9f 57       	subi	r25, 0x7F	; 127
 970:	50 40       	sbci	r21, 0x00	; 0
 972:	9a f0       	brmi	.+38     	; 0x99a <__mulsf3_pse+0x88>
 974:	f1 f0       	breq	.+60     	; 0x9b2 <__mulsf3_pse+0xa0>
 976:	88 23       	and	r24, r24
 978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	bb 1f       	adc	r27, r27
 980:	66 1f       	adc	r22, r22
 982:	77 1f       	adc	r23, r23
 984:	88 1f       	adc	r24, r24
 986:	91 50       	subi	r25, 0x01	; 1
 988:	50 40       	sbci	r21, 0x00	; 0
 98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
 98c:	9e 3f       	cpi	r25, 0xFE	; 254
 98e:	51 05       	cpc	r21, r1
 990:	80 f0       	brcs	.+32     	; 0x9b2 <__mulsf3_pse+0xa0>
 992:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 996:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__fp_szero>
 99a:	5f 3f       	cpi	r21, 0xFF	; 255
 99c:	e4 f3       	brlt	.-8      	; 0x996 <__mulsf3_pse+0x84>
 99e:	98 3e       	cpi	r25, 0xE8	; 232
 9a0:	d4 f3       	brlt	.-12     	; 0x996 <__mulsf3_pse+0x84>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b7 95       	ror	r27
 9aa:	f7 95       	ror	r31
 9ac:	e7 95       	ror	r30
 9ae:	9f 5f       	subi	r25, 0xFF	; 255
 9b0:	c1 f7       	brne	.-16     	; 0x9a2 <__mulsf3_pse+0x90>
 9b2:	fe 2b       	or	r31, r30
 9b4:	88 0f       	add	r24, r24
 9b6:	91 1d       	adc	r25, r1
 9b8:	96 95       	lsr	r25
 9ba:	87 95       	ror	r24
 9bc:	97 f9       	bld	r25, 7
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
