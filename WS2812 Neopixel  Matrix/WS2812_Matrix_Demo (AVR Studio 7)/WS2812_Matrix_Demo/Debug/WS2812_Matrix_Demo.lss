
WS2812_Matrix_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000103a  000010ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000300  00800104  00800104  000010d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001148  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002798  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3f  00000000  00000000  00003a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e04  00000000  00000000  0000454f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00005354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000744  00000000  00000000  0000571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002781  00000000  00000000  00005e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000085e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	24 e0       	ldi	r18, 0x04	; 4
      76:	a4 e0       	ldi	r26, 0x04	; 4
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a4 30       	cpi	r26, 0x04	; 4
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ea e3       	ldi	r30, 0x3A	; 58
      8c:	f0 e1       	ldi	r31, 0x10	; 16
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a4 30       	cpi	r26, 0x04	; 4
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 56 00 	call	0xac	; 0xac <main>
      9e:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      a6:	0e 94 23 02 	call	0x446	; 0x446 <system_init>
      aa:	08 95       	ret

000000ac <main>:
int main(void)
{
   signed char i = 0;
   signed char j = 0;
   
   atmel_start_init();
      ac:	0e 94 53 00 	call	0xa6	; 0xa6 <atmel_start_init>
   WS2812_init();
      b0:	0e 94 ad 02 	call	0x55a	; 0x55a <WS2812_init>

   WS2812_set_common_colour_on_all_LEDs(200, 0, 0);
      b4:	40 e0       	ldi	r20, 0x00	; 0
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	88 ec       	ldi	r24, 0xC8	; 200
      ba:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	2f ef       	ldi	r18, 0xFF	; 255
      c0:	8b e4       	ldi	r24, 0x4B	; 75
      c2:	9d e1       	ldi	r25, 0x1D	; 29
      c4:	21 50       	subi	r18, 0x01	; 1
      c6:	80 40       	sbci	r24, 0x00	; 0
      c8:	90 40       	sbci	r25, 0x00	; 0
      ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x18>
      cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x22>
      ce:	00 00       	nop
   _delay_ms(600);
   WS2812_set_common_colour_on_all_LEDs(0, 200, 0);
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	68 ec       	ldi	r22, 0xC8	; 200
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	8b e4       	ldi	r24, 0x4B	; 75
      de:	9d e1       	ldi	r25, 0x1D	; 29
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	80 40       	sbci	r24, 0x00	; 0
      e4:	90 40       	sbci	r25, 0x00	; 0
      e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x34>
      e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x3e>
      ea:	00 00       	nop
   _delay_ms(600);
   WS2812_set_common_colour_on_all_LEDs(0, 0, 200);
      ec:	48 ec       	ldi	r20, 0xC8	; 200
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
      f6:	2f ef       	ldi	r18, 0xFF	; 255
      f8:	8b e4       	ldi	r24, 0x4B	; 75
      fa:	9d e1       	ldi	r25, 0x1D	; 29
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <main+0x50>
     104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x5a>
     106:	00 00       	nop
   _delay_ms(600);
   WS2812_set_common_colour_on_all_LEDs(180, 180, 180);
     108:	44 eb       	ldi	r20, 0xB4	; 180
     10a:	64 eb       	ldi	r22, 0xB4	; 180
     10c:	84 eb       	ldi	r24, 0xB4	; 180
     10e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
     112:	2f ef       	ldi	r18, 0xFF	; 255
     114:	8b e4       	ldi	r24, 0x4B	; 75
     116:	9d e1       	ldi	r25, 0x1D	; 29
     118:	21 50       	subi	r18, 0x01	; 1
     11a:	80 40       	sbci	r24, 0x00	; 0
     11c:	90 40       	sbci	r25, 0x00	; 0
     11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x6c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x76>
     122:	00 00       	nop
   _delay_ms(600);
   WS2812_Draw_Line(0, 0, 15, 15, 240, 0, 0);
     124:	c1 2c       	mov	r12, r1
     126:	e1 2c       	mov	r14, r1
     128:	00 ef       	ldi	r16, 0xF0	; 240
     12a:	2f e0       	ldi	r18, 0x0F	; 15
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	4f e0       	ldi	r20, 0x0F	; 15
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
   WS2812_Draw_Line(0, 15, 15, 0, 240, 0, 0);
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	4f e0       	ldi	r20, 0x0F	; 15
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	6f e0       	ldi	r22, 0x0F	; 15
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
     152:	2f ef       	ldi	r18, 0xFF	; 255
     154:	8f e2       	ldi	r24, 0x2F	; 47
     156:	95 e7       	ldi	r25, 0x75	; 117
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	80 40       	sbci	r24, 0x00	; 0
     15c:	90 40       	sbci	r25, 0x00	; 0
     15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xac>
     160:	00 c0       	rjmp	.+0      	; 0x162 <main+0xb6>
     162:	00 00       	nop
   _delay_ms(2400);
   WS2812_reset();
     164:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
   WS2812_set_common_colour_on_all_LEDs(160, 0, 0);
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 ea       	ldi	r24, 0xA0	; 160
     16e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
   WS2812_Draw_Triangle(0, 0, 0, 15, 15, 7, NO, 0, 0, 180);
     172:	84 eb       	ldi	r24, 0xB4	; 180
     174:	8f 93       	push	r24
     176:	81 2c       	mov	r8, r1
     178:	a1 2c       	mov	r10, r1
     17a:	0f 2e       	mov	r0, r31
     17c:	f7 e0       	ldi	r31, 0x07	; 7
     17e:	ef 2e       	mov	r14, r31
     180:	f1 2c       	mov	r15, r1
     182:	f0 2d       	mov	r31, r0
     184:	0f e0       	ldi	r16, 0x0F	; 15
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	2f e0       	ldi	r18, 0x0F	; 15
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 74 04 	call	0x8e8	; 0x8e8 <WS2812_Draw_Triangle>
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	8f e2       	ldi	r24, 0x2F	; 47
     1a0:	95 e7       	ldi	r25, 0x75	; 117
     1a2:	21 50       	subi	r18, 0x01	; 1
     1a4:	80 40       	sbci	r24, 0x00	; 0
     1a6:	90 40       	sbci	r25, 0x00	; 0
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0xf6>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x100>
     1ac:	00 00       	nop
   _delay_ms(2400);
   WS2812_reset();
     1ae:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
   WS2812_Draw_Rectangle(2, 2, 14, 13, YES, 0, 160, 0);
     1b2:	0f 2e       	mov	r0, r31
     1b4:	f0 ea       	ldi	r31, 0xA0	; 160
     1b6:	cf 2e       	mov	r12, r31
     1b8:	f0 2d       	mov	r31, r0
     1ba:	e1 2c       	mov	r14, r1
     1bc:	01 e0       	ldi	r16, 0x01	; 1
     1be:	2d e0       	ldi	r18, 0x0D	; 13
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	4e e0       	ldi	r20, 0x0E	; 14
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 0a 04 	call	0x814	; 0x814 <WS2812_Draw_Rectangle>
   WS2812_Draw_Circle(8, 7, 2, YES, 190, 0, 0);
     1d2:	c1 2c       	mov	r12, r1
     1d4:	0e eb       	ldi	r16, 0xBE	; 190
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	42 e0       	ldi	r20, 0x02	; 2
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	67 e0       	ldi	r22, 0x07	; 7
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	88 e0       	ldi	r24, 0x08	; 8
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 21 06 	call	0xc42	; 0xc42 <WS2812_Draw_Circle>
     1e8:	2f ef       	ldi	r18, 0xFF	; 255
     1ea:	8f e2       	ldi	r24, 0x2F	; 47
     1ec:	95 e7       	ldi	r25, 0x75	; 117
     1ee:	21 50       	subi	r18, 0x01	; 1
     1f0:	80 40       	sbci	r24, 0x00	; 0
     1f2:	90 40       	sbci	r25, 0x00	; 0
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x142>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x14c>
     1f8:	00 00       	nop
   _delay_ms(2400);
   WS2812_reset();
     1fa:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     1fe:	0f 90       	pop	r0
       
       WS2812_reset();

       for(i = 0; i < 16; i += 2)
       {
           WS2812_Draw_V_Line(i, 0, 15, 32, 64, 160);
     200:	0f 2e       	mov	r0, r31
     202:	ff e0       	ldi	r31, 0x0F	; 15
     204:	8f 2e       	mov	r8, r31
     206:	91 2c       	mov	r9, r1
     208:	f0 2d       	mov	r31, r0
#include <util/delay.h>
#include "WS2812.h"


int main(void)
{
     20a:	c0 e0       	ldi	r28, 0x00	; 0
     20c:	d0 e0       	ldi	r29, 0x00	; 0
   
   while(1)
   {
       for(i = 0; i < 8; i += 2)
       {
           WS2812_Draw_Circle(7, 7, i, NO, 20, 60, 190);
     20e:	0f 2e       	mov	r0, r31
     210:	fe eb       	ldi	r31, 0xBE	; 190
     212:	cf 2e       	mov	r12, r31
     214:	f0 2d       	mov	r31, r0
     216:	0f 2e       	mov	r0, r31
     218:	fc e3       	ldi	r31, 0x3C	; 60
     21a:	ef 2e       	mov	r14, r31
     21c:	f0 2d       	mov	r31, r0
     21e:	04 e1       	ldi	r16, 0x14	; 20
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	ae 01       	movw	r20, r28
     224:	67 e0       	ldi	r22, 0x07	; 7
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	87 e0       	ldi	r24, 0x07	; 7
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 21 06 	call	0xc42	; 0xc42 <WS2812_Draw_Circle>
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	87 e8       	ldi	r24, 0x87	; 135
     234:	93 e1       	ldi	r25, 0x13	; 19
     236:	21 50       	subi	r18, 0x01	; 1
     238:	80 40       	sbci	r24, 0x00	; 0
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x18a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x194>
     240:	00 00       	nop
     242:	22 96       	adiw	r28, 0x02	; 2
   _delay_ms(2400);
   WS2812_reset();
   
   while(1)
   {
       for(i = 0; i < 8; i += 2)
     244:	c8 30       	cpi	r28, 0x08	; 8
     246:	d1 05       	cpc	r29, r1
     248:	11 f7       	brne	.-60     	; 0x20e <main+0x162>
     24a:	2f ef       	ldi	r18, 0xFF	; 255
     24c:	83 ed       	ldi	r24, 0xD3	; 211
     24e:	90 e3       	ldi	r25, 0x30	; 48
     250:	21 50       	subi	r18, 0x01	; 1
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	90 40       	sbci	r25, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <main+0x1a4>
     258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1ae>
     25a:	00 00       	nop
           WS2812_Draw_Circle(7, 7, i, NO, 20, 60, 190);
           _delay_ms(400);
       }
       _delay_ms(1000);
       
       WS2812_reset();
     25c:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     260:	c0 e0       	ldi	r28, 0x00	; 0
     262:	d0 e0       	ldi	r29, 0x00	; 0

       for(i = 0; i < 16; i += 2)
       {
           WS2812_Draw_V_Line(i, 0, 15, 32, 64, 160);
     264:	0f 2e       	mov	r0, r31
     266:	f0 ea       	ldi	r31, 0xA0	; 160
     268:	ef 2e       	mov	r14, r31
     26a:	f0 2d       	mov	r31, r0
     26c:	00 e4       	ldi	r16, 0x40	; 64
     26e:	20 e2       	ldi	r18, 0x20	; 32
     270:	a4 01       	movw	r20, r8
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	ce 01       	movw	r24, r28
     278:	0e 94 a4 03 	call	0x748	; 0x748 <WS2812_Draw_V_Line>
     27c:	2f ef       	ldi	r18, 0xFF	; 255
     27e:	87 e8       	ldi	r24, 0x87	; 135
     280:	93 e1       	ldi	r25, 0x13	; 19
     282:	21 50       	subi	r18, 0x01	; 1
     284:	80 40       	sbci	r24, 0x00	; 0
     286:	90 40       	sbci	r25, 0x00	; 0
     288:	e1 f7       	brne	.-8      	; 0x282 <main+0x1d6>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x1e0>
     28c:	00 00       	nop
     28e:	22 96       	adiw	r28, 0x02	; 2
       }
       _delay_ms(1000);
       
       WS2812_reset();

       for(i = 0; i < 16; i += 2)
     290:	c0 31       	cpi	r28, 0x10	; 16
     292:	d1 05       	cpc	r29, r1
     294:	39 f7       	brne	.-50     	; 0x264 <main+0x1b8>
     296:	c0 e0       	ldi	r28, 0x00	; 0
     298:	d0 e0       	ldi	r29, 0x00	; 0
           WS2812_Draw_V_Line(i, 0, 15, 32, 64, 160);
           _delay_ms(400);
       }
       for(i = 0; i < 16; i += 2)
       {
           WS2812_Draw_H_Line(0, 15, i, 64, 32, 160);
     29a:	0f 2e       	mov	r0, r31
     29c:	f0 ea       	ldi	r31, 0xA0	; 160
     29e:	ef 2e       	mov	r14, r31
     2a0:	f0 2d       	mov	r31, r0
     2a2:	00 e2       	ldi	r16, 0x20	; 32
     2a4:	20 e4       	ldi	r18, 0x40	; 64
     2a6:	ae 01       	movw	r20, r28
     2a8:	b4 01       	movw	r22, r8
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
     2b2:	2f ef       	ldi	r18, 0xFF	; 255
     2b4:	87 e8       	ldi	r24, 0x87	; 135
     2b6:	93 e1       	ldi	r25, 0x13	; 19
     2b8:	21 50       	subi	r18, 0x01	; 1
     2ba:	80 40       	sbci	r24, 0x00	; 0
     2bc:	90 40       	sbci	r25, 0x00	; 0
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x20c>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x216>
     2c2:	00 00       	nop
     2c4:	22 96       	adiw	r28, 0x02	; 2
       for(i = 0; i < 16; i += 2)
       {
           WS2812_Draw_V_Line(i, 0, 15, 32, 64, 160);
           _delay_ms(400);
       }
       for(i = 0; i < 16; i += 2)
     2c6:	c0 31       	cpi	r28, 0x10	; 16
     2c8:	d1 05       	cpc	r29, r1
     2ca:	39 f7       	brne	.-50     	; 0x29a <main+0x1ee>
     2cc:	2f ef       	ldi	r18, 0xFF	; 255
     2ce:	83 ed       	ldi	r24, 0xD3	; 211
     2d0:	90 e3       	ldi	r25, 0x30	; 48
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	80 40       	sbci	r24, 0x00	; 0
     2d6:	90 40       	sbci	r25, 0x00	; 0
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0x226>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x230>
     2dc:	00 00       	nop
           WS2812_Draw_H_Line(0, 15, i, 64, 32, 160);
           _delay_ms(400);
       }
       _delay_ms(1000);

       WS2812_reset();
     2de:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
     2e6:	a4 01       	movw	r20, r8
     2e8:	4c 1b       	sub	r20, r28
     2ea:	5d 0b       	sbc	r21, r29

       for(i = 0; i < 16; i += 2)
       {
           WS2812_Draw_Rectangle(i, i, (15 - i), (15 - i), NO, 64, 128, 32);
     2ec:	68 94       	set
     2ee:	aa 24       	eor	r10, r10
     2f0:	a5 f8       	bld	r10, 5
     2f2:	68 94       	set
     2f4:	cc 24       	eor	r12, r12
     2f6:	c7 f8       	bld	r12, 7
     2f8:	68 94       	set
     2fa:	ee 24       	eor	r14, r14
     2fc:	e6 f8       	bld	r14, 6
     2fe:	00 e0       	ldi	r16, 0x00	; 0
     300:	9a 01       	movw	r18, r20
     302:	be 01       	movw	r22, r28
     304:	ce 01       	movw	r24, r28
     306:	0e 94 0a 04 	call	0x814	; 0x814 <WS2812_Draw_Rectangle>
     30a:	2f ef       	ldi	r18, 0xFF	; 255
     30c:	87 e8       	ldi	r24, 0x87	; 135
     30e:	93 e1       	ldi	r25, 0x13	; 19
     310:	21 50       	subi	r18, 0x01	; 1
     312:	80 40       	sbci	r24, 0x00	; 0
     314:	90 40       	sbci	r25, 0x00	; 0
     316:	e1 f7       	brne	.-8      	; 0x310 <main+0x264>
     318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x26e>
     31a:	00 00       	nop
     31c:	22 96       	adiw	r28, 0x02	; 2
       }
       _delay_ms(1000);

       WS2812_reset();

       for(i = 0; i < 16; i += 2)
     31e:	c0 31       	cpi	r28, 0x10	; 16
     320:	d1 05       	cpc	r29, r1
     322:	09 f7       	brne	.-62     	; 0x2e6 <main+0x23a>
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	83 ed       	ldi	r24, 0xD3	; 211
     328:	90 e3       	ldi	r25, 0x30	; 48
     32a:	21 50       	subi	r18, 0x01	; 1
     32c:	80 40       	sbci	r24, 0x00	; 0
     32e:	90 40       	sbci	r25, 0x00	; 0
     330:	e1 f7       	brne	.-8      	; 0x32a <main+0x27e>
     332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x288>
     334:	00 00       	nop
     336:	d4 e0       	ldi	r29, 0x04	; 4
       }
       _delay_ms(1000);
       
       for(j = 0; j < 4; j++)
       {
           WS2812_set_common_colour_on_all_LEDs(160, 60, 0);
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	6c e3       	ldi	r22, 0x3C	; 60
     33c:	80 ea       	ldi	r24, 0xA0	; 160
     33e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
     342:	c3 e6       	ldi	r28, 0x63	; 99
           for(i = 0; i < 99; i++)
           {
              WS2812_set_colour_on_channel((rand() >> 7), 220, 90, 9);
     344:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     348:	29 e0       	ldi	r18, 0x09	; 9
     34a:	4a e5       	ldi	r20, 0x5A	; 90
     34c:	6c ed       	ldi	r22, 0xDC	; 220
     34e:	88 0f       	add	r24, r24
     350:	89 2f       	mov	r24, r25
     352:	88 1f       	adc	r24, r24
     354:	99 0b       	sbc	r25, r25
     356:	0e 94 b0 02 	call	0x560	; 0x560 <WS2812_set_colour_on_channel>
     35a:	c1 50       	subi	r28, 0x01	; 1
       _delay_ms(1000);
       
       for(j = 0; j < 4; j++)
       {
           WS2812_set_common_colour_on_all_LEDs(160, 60, 0);
           for(i = 0; i < 99; i++)
     35c:	99 f7       	brne	.-26     	; 0x344 <main+0x298>
     35e:	d1 50       	subi	r29, 0x01	; 1
           WS2812_Draw_Rectangle(i, i, (15 - i), (15 - i), NO, 64, 128, 32);
           _delay_ms(400);
       }
       _delay_ms(1000);
       
       for(j = 0; j < 4; j++)
     360:	59 f7       	brne	.-42     	; 0x338 <main+0x28c>
           {
              WS2812_set_colour_on_channel((rand() >> 7), 220, 90, 9);
           }
       }
       
       WS2812_reset();
     362:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     366:	68 94       	set
     368:	dd 24       	eor	r13, r13
     36a:	d2 f8       	bld	r13, 2
     36c:	29 c0       	rjmp	.+82     	; 0x3c0 <main+0x314>
       for(j = 0; j < 4; j++)
       {
           i = 15;
           while(i > -1)
           {
               WS2812_Draw_V_Line(i, 0, 15, 0, 0, 0);
     36e:	e1 2c       	mov	r14, r1
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	a4 01       	movw	r20, r8
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	0e 94 a4 03 	call	0x748	; 0x748 <WS2812_Draw_V_Line>
               WS2812_Draw_V_Line(i, 0, 15, (rand() >> 7), (rand() >> 7), (rand() >> 7));
     380:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     384:	7c 01       	movw	r14, r24
     386:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     38a:	8c 01       	movw	r16, r24
     38c:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     390:	ee 0c       	add	r14, r14
     392:	ef 2c       	mov	r14, r15
     394:	ee 1c       	adc	r14, r14
     396:	ff 08       	sbc	r15, r15
     398:	00 0f       	add	r16, r16
     39a:	01 2f       	mov	r16, r17
     39c:	00 1f       	adc	r16, r16
     39e:	11 0b       	sbc	r17, r17
     3a0:	88 0f       	add	r24, r24
     3a2:	89 2f       	mov	r24, r25
     3a4:	88 1f       	adc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	28 2f       	mov	r18, r24
     3aa:	a4 01       	movw	r20, r8
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	ce 01       	movw	r24, r28
     3b2:	0e 94 a4 03 	call	0x748	; 0x748 <WS2812_Draw_V_Line>
     3b6:	21 97       	sbiw	r28, 0x01	; 1
     3b8:	d0 f6       	brcc	.-76     	; 0x36e <main+0x2c2>
     3ba:	da 94       	dec	r13
           }
       }
       
       WS2812_reset();
       
       for(j = 0; j < 4; j++)
     3bc:	dd 20       	and	r13, r13
     3be:	19 f0       	breq	.+6      	; 0x3c6 <main+0x31a>
       }
       _delay_ms(1000);
       
       for(j = 0; j < 4; j++)
       {
           WS2812_set_common_colour_on_all_LEDs(160, 60, 0);
     3c0:	cf e0       	ldi	r28, 0x0F	; 15
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	d4 cf       	rjmp	.-88     	; 0x36e <main+0x2c2>
               WS2812_Draw_V_Line(i, 0, 15, (rand() >> 7), (rand() >> 7), (rand() >> 7));
               i--;
           }
       }
       
       WS2812_reset();
     3c6:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f3 e6       	ldi	r31, 0x63	; 99
     3ce:	cf 2e       	mov	r12, r31
     3d0:	f0 2d       	mov	r31, r0
     3d2:	26 c0       	rjmp	.+76     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
       
       for(j = 0; j < 99; j++)
       {
           for(i = 0; i < 99; i++)
           {
               WS2812_set_colour_on_channel((rand() >> 7), (rand() >> 7), (rand() >> 7), (rand() >> 7));
     3d4:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     3d8:	7c 01       	movw	r14, r24
     3da:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     3de:	8c 01       	movw	r16, r24
     3e0:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     3e4:	ec 01       	movw	r28, r24
     3e6:	0e 94 a8 07 	call	0xf50	; 0xf50 <rand>
     3ea:	97 01       	movw	r18, r14
     3ec:	22 0f       	add	r18, r18
     3ee:	23 2f       	mov	r18, r19
     3f0:	22 1f       	adc	r18, r18
     3f2:	33 0b       	sbc	r19, r19
     3f4:	a8 01       	movw	r20, r16
     3f6:	44 0f       	add	r20, r20
     3f8:	45 2f       	mov	r20, r21
     3fa:	44 1f       	adc	r20, r20
     3fc:	55 0b       	sbc	r21, r21
     3fe:	be 01       	movw	r22, r28
     400:	66 0f       	add	r22, r22
     402:	67 2f       	mov	r22, r23
     404:	66 1f       	adc	r22, r22
     406:	77 0b       	sbc	r23, r23
     408:	88 0f       	add	r24, r24
     40a:	89 2f       	mov	r24, r25
     40c:	88 1f       	adc	r24, r24
     40e:	99 0b       	sbc	r25, r25
     410:	0e 94 b0 02 	call	0x560	; 0x560 <WS2812_set_colour_on_channel>
     414:	da 94       	dec	r13
       
       WS2812_reset();
       
       for(j = 0; j < 99; j++)
       {
           for(i = 0; i < 99; i++)
     416:	d1 10       	cpse	r13, r1
     418:	dd cf       	rjmp	.-70     	; 0x3d4 <main+0x328>
     41a:	ca 94       	dec	r12
           }
       }
       
       WS2812_reset();
       
       for(j = 0; j < 99; j++)
     41c:	cc 20       	and	r12, r12
     41e:	29 f0       	breq	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
           {
              WS2812_set_colour_on_channel((rand() >> 7), 220, 90, 9);
           }
       }
       
       WS2812_reset();
     420:	0f 2e       	mov	r0, r31
     422:	f3 e6       	ldi	r31, 0x63	; 99
     424:	df 2e       	mov	r13, r31
     426:	f0 2d       	mov	r31, r0
     428:	d5 cf       	rjmp	.-86     	; 0x3d4 <main+0x328>
           {
               WS2812_set_colour_on_channel((rand() >> 7), (rand() >> 7), (rand() >> 7), (rand() >> 7));
           }
       }
       
       WS2812_reset();
     42a:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
   }
     42e:	ed ce       	rjmp	.-550    	; 0x20a <main+0x15e>

00000430 <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
     430:	24 98       	cbi	0x04, 4	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
     432:	2c 98       	cbi	0x05, 4	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     434:	23 9a       	sbi	0x04, 3	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     436:	2b 98       	cbi	0x05, 3	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     438:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     43a:	2d 98       	cbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
     43c:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
     43e:	2a 98       	cbi	0x05, 2	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     440:	0e 94 47 02 	call	0x48e	; 0x48e <SPI_0_init>
     444:	08 95       	ret

00000446 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
     446:	8f ee       	ldi	r24, 0xEF	; 239
     448:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
     44c:	84 b1       	in	r24, 0x04	; 4
     44e:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
     450:	85 b1       	in	r24, 0x05	; 5
     452:	9f ef       	ldi	r25, 0xFF	; 255
     454:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
     456:	87 b1       	in	r24, 0x07	; 7
     458:	80 78       	andi	r24, 0x80	; 128
     45a:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
     45c:	88 b1       	in	r24, 0x08	; 8
     45e:	8f 67       	ori	r24, 0x7F	; 127
     460:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
     462:	8a b1       	in	r24, 0x0a	; 10
     464:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
     466:	8b b1       	in	r24, 0x0b	; 11
     468:	9b b9       	out	0x0b, r25	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	60 e8       	ldi	r22, 0x80	; 128
     46e:	81 e6       	ldi	r24, 0x61	; 97
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 40 02 	call	0x480	; 0x480 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
     476:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
     478:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
     47a:	0e 94 18 02 	call	0x430	; 0x430 <SPI_0_initialization>
     47e:	08 95       	ret

00000480 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
     480:	2f b7       	in	r18, 0x3f	; 63
	cli
     482:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     484:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
     486:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
     488:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
     48a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
     48c:	08 95       	ret

0000048e <SPI_0_init>:
 */
int8_t SPI_0_init()
{

	/* Enable SPI */
	PRR &= ~(1 << PRSPI);
     48e:	e4 e6       	ldi	r30, 0x64	; 100
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	8b 7f       	andi	r24, 0xFB	; 251
     496:	80 83       	st	Z, r24

	SPCR = 1 << SPE                     /* SPI module enable: enabled */
     498:	8c e5       	ldi	r24, 0x5C	; 92
     49a:	8c bd       	out	0x2c, r24	; 44
	       | 1 << CPOL                  /* Clock polarity: enabled */
	       | 1 << CPHA                  /* Clock phase: enabled */
	       | 0 << SPIE                  /* SPI interrupt enable: disabled */
	       | (0 << SPR1) | (0 << SPR0); /* SPI Clock rate selection: fosc/2 */

	SPSR = (1 << SPI2X); /* Enable double SPI speed */
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	8d bd       	out	0x2d, r24	; 45

	return 0;
}
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret

000004a4 <WS2812_send_data>:
    WS2812_set_common_colour_on_all_LEDs(0, 0, 0);
}


void WS2812_send_data(unsigned char r, unsigned char g, unsigned char b)
{
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	26 2f       	mov	r18, r22
    unsigned char s = number_of_bits;

    unsigned long value = 0x00000000;

    value = (((unsigned long)g << 16) | ((unsigned long)r << 8) | ((unsigned long)b));
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	7a 01       	movw	r14, r20
     4b6:	8b 01       	movw	r16, r22
     4b8:	f8 2a       	or	r15, r24
     4ba:	d8 01       	movw	r26, r16
     4bc:	c7 01       	movw	r24, r14
     4be:	a2 2b       	or	r26, r18
     4c0:	28 e1       	ldi	r18, 0x18	; 24
           asm("nop");
       }

       else
       {
           SPDR = zero;
     4c2:	40 ec       	ldi	r20, 0xC0	; 192

    while(s > 0)
    {
       if((value & 0x800000) != LOW)
       {
           SPDR = one;
     4c4:	38 ef       	ldi	r19, 0xF8	; 248

    value = (((unsigned long)g << 16) | ((unsigned long)r << 8) | ((unsigned long)b));

    while(s > 0)
    {
       if((value & 0x800000) != LOW)
     4c6:	a7 ff       	sbrs	r26, 7
     4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <WS2812_send_data+0x34>
       {
           SPDR = one;
     4ca:	3e bd       	out	0x2e, r19	; 46
		   while(!(SPSR & (1<<SPIF)));
     4cc:	0d b4       	in	r0, 0x2d	; 45
     4ce:	07 fe       	sbrs	r0, 7
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <WS2812_send_data+0x28>
		   asm("nop");
     4d2:	00 00       	nop
           asm("nop");
     4d4:	00 00       	nop
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <WS2812_send_data+0x3c>
       }

       else
       {
           SPDR = zero;
     4d8:	4e bd       	out	0x2e, r20	; 46
	       while(!(SPSR & (1<<SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <WS2812_send_data+0x36>
       }

       value <<= 1;
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	aa 1f       	adc	r26, r26
     4e6:	bb 1f       	adc	r27, r27
     4e8:	21 50       	subi	r18, 0x01	; 1

    unsigned long value = 0x00000000;

    value = (((unsigned long)g << 16) | ((unsigned long)r << 8) | ((unsigned long)b));

    while(s > 0)
     4ea:	69 f7       	brne	.-38     	; 0x4c6 <WS2812_send_data+0x22>
       }

       value <<= 1;
       s--;
    }
}
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <WS2812_set_common_colour_on_all_LEDs>:


void WS2812_set_common_colour_on_all_LEDs(unsigned char r, unsigned char g, unsigned char b)
{
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	f8 2e       	mov	r15, r24
     506:	06 2f       	mov	r16, r22
     508:	14 2f       	mov	r17, r20
     50a:	c1 e0       	ldi	r28, 0x01	; 1
     50c:	d4 e0       	ldi	r29, 0x04	; 4
     50e:	0f 2e       	mov	r0, r31
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	cf 2e       	mov	r12, r31
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	df 2e       	mov	r13, r31
     518:	f0 2d       	mov	r31, r0
    signed int n = (number_of_LEDs - 1);

    while(n > -1)
    {
        LED_colours[n][0] = r;
     51a:	f8 82       	st	Y, r15
        LED_colours[n][1] = g;
     51c:	09 83       	std	Y+1, r16	; 0x01
        LED_colours[n][2] = b;
     51e:	1a 83       	std	Y+2, r17	; 0x02
        WS2812_send_data(LED_colours[n][0], LED_colours[n][1], LED_colours[n][2]);
     520:	41 2f       	mov	r20, r17
     522:	60 2f       	mov	r22, r16
     524:	8f 2d       	mov	r24, r15
     526:	0e 94 52 02 	call	0x4a4	; 0x4a4 <WS2812_send_data>
     52a:	23 97       	sbiw	r28, 0x03	; 3

void WS2812_set_common_colour_on_all_LEDs(unsigned char r, unsigned char g, unsigned char b)
{
    signed int n = (number_of_LEDs - 1);

    while(n > -1)
     52c:	cc 15       	cp	r28, r12
     52e:	dd 05       	cpc	r29, r13
     530:	a1 f7       	brne	.-24     	; 0x51a <WS2812_set_common_colour_on_all_LEDs+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	8f ee       	ldi	r24, 0xEF	; 239
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <WS2812_set_common_colour_on_all_LEDs+0x40>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <WS2812_set_common_colour_on_all_LEDs+0x46>
     53c:	00 00       	nop
        WS2812_send_data(LED_colours[n][0], LED_colours[n][1], LED_colours[n][2]);
        n--;
    }

    WS2812_update();
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	08 95       	ret

0000054e <WS2812_reset>:
}


void WS2812_reset()
{
    WS2812_set_common_colour_on_all_LEDs(0, 0, 0);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <WS2812_set_common_colour_on_all_LEDs>
     558:	08 95       	ret

0000055a <WS2812_init>:
}


void WS2812_init()
{
    WS2812_reset();
     55a:	0e 94 a7 02 	call	0x54e	; 0x54e <WS2812_reset>
     55e:	08 95       	ret

00000560 <WS2812_set_colour_on_channel>:
    WS2812_update();
}


void WS2812_set_colour_on_channel(unsigned int channel, unsigned char r, unsigned char g, unsigned char b)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
    unsigned int n = 0;

    LED_colours[channel][0] = r;
     568:	fc 01       	movw	r30, r24
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	8e 0f       	add	r24, r30
     570:	9f 1f       	adc	r25, r31
     572:	fc 01       	movw	r30, r24
     574:	ec 5f       	subi	r30, 0xFC	; 252
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	60 83       	st	Z, r22
    LED_colours[channel][1] = g;
     57a:	41 83       	std	Z+1, r20	; 0x01
    LED_colours[channel][2] = b;
     57c:	22 83       	std	Z+2, r18	; 0x02
     57e:	c4 e0       	ldi	r28, 0x04	; 4
     580:	d1 e0       	ldi	r29, 0x01	; 1
     582:	04 e0       	ldi	r16, 0x04	; 4
     584:	14 e0       	ldi	r17, 0x04	; 4

    for(n = 0; n < number_of_LEDs; n++)
    {
        WS2812_send_data(LED_colours[n][0], LED_colours[n][1], LED_colours[n][2]);
     586:	4a 81       	ldd	r20, Y+2	; 0x02
     588:	69 81       	ldd	r22, Y+1	; 0x01
     58a:	88 81       	ld	r24, Y
     58c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <WS2812_send_data>
     590:	23 96       	adiw	r28, 0x03	; 3

    LED_colours[channel][0] = r;
    LED_colours[channel][1] = g;
    LED_colours[channel][2] = b;

    for(n = 0; n < number_of_LEDs; n++)
     592:	c0 17       	cp	r28, r16
     594:	d1 07       	cpc	r29, r17
     596:	b9 f7       	brne	.-18     	; 0x586 <WS2812_set_colour_on_channel+0x26>
     598:	8f ee       	ldi	r24, 0xEF	; 239
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <WS2812_set_colour_on_channel+0x3c>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <WS2812_set_colour_on_channel+0x42>
     5a2:	00 00       	nop
    {
        WS2812_send_data(LED_colours[n][0], LED_colours[n][1], LED_colours[n][2]);
    }

    WS2812_update();
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <WS2812_set_colour_xy>:


void WS2812_set_colour_xy(signed int x_pos, signed int y_pos, unsigned char r, unsigned char g, unsigned char b)
{
     5ae:	0f 93       	push	r16
     5b0:	34 2f       	mov	r19, r20
     5b2:	42 2f       	mov	r20, r18
     5b4:	20 2f       	mov	r18, r16
    unsigned int channel = 0;

    channel = (x_pos << 0x04);
     5b6:	fc 01       	movw	r30, r24
     5b8:	e2 95       	swap	r30
     5ba:	f2 95       	swap	r31
     5bc:	f0 7f       	andi	r31, 0xF0	; 240
     5be:	fe 27       	eor	r31, r30
     5c0:	e0 7f       	andi	r30, 0xF0	; 240
     5c2:	fe 27       	eor	r31, r30

    if((x_pos % 2) == 0)
     5c4:	80 fd       	sbrc	r24, 0
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <WS2812_set_colour_xy+0x22>
    {
        channel += y_pos;
     5c8:	cb 01       	movw	r24, r22
     5ca:	8e 0f       	add	r24, r30
     5cc:	9f 1f       	adc	r25, r31
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <WS2812_set_colour_xy+0x2a>
    }
    else
    {
        channel += (0x0F - y_pos);
     5d0:	cf 01       	movw	r24, r30
     5d2:	86 1b       	sub	r24, r22
     5d4:	97 0b       	sbc	r25, r23
     5d6:	0f 96       	adiw	r24, 0x0f	; 15
    }

    WS2812_set_colour_on_channel(channel, r, g, b);
     5d8:	63 2f       	mov	r22, r19
     5da:	0e 94 b0 02 	call	0x560	; 0x560 <WS2812_set_colour_on_channel>
}
     5de:	0f 91       	pop	r16
     5e0:	08 95       	ret

000005e2 <WS2812_Draw_Line>:


void WS2812_Draw_Line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char r, unsigned char g, unsigned char b)
{
     5e2:	2f 92       	push	r2
     5e4:	3f 92       	push	r3
     5e6:	4f 92       	push	r4
     5e8:	5f 92       	push	r5
     5ea:	6f 92       	push	r6
     5ec:	7f 92       	push	r7
     5ee:	8f 92       	push	r8
     5f0:	9f 92       	push	r9
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <WS2812_Draw_Line+0x26>
     608:	00 d0       	rcall	.+0      	; 0x60a <WS2812_Draw_Line+0x28>
     60a:	00 d0       	rcall	.+0      	; 0x60c <WS2812_Draw_Line+0x2a>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	5c 01       	movw	r10, r24
     612:	7e 83       	std	Y+6, r23	; 0x06
     614:	6d 83       	std	Y+5, r22	; 0x05
     616:	1a 01       	movw	r2, r20
     618:	3c 83       	std	Y+4, r19	; 0x04
     61a:	2b 83       	std	Y+3, r18	; 0x03
     61c:	09 83       	std	Y+1, r16	; 0x01
     61e:	ea 82       	std	Y+2, r14	; 0x02
     620:	1c 2d       	mov	r17, r12
    signed int dy = 0;
    signed int stepx = 0;
    signed int stepy = 0;
    signed int fraction = 0;

    dy = (y2 - y1);
     622:	79 01       	movw	r14, r18
     624:	e6 1a       	sub	r14, r22
     626:	f7 0a       	sbc	r15, r23
    dx = (x2 - x1);
     628:	2a 01       	movw	r4, r20
     62a:	48 1a       	sub	r4, r24
     62c:	59 0a       	sbc	r5, r25

    if (dy < 0)
     62e:	ff 20       	and	r15, r15
     630:	3c f4       	brge	.+14     	; 0x640 <WS2812_Draw_Line+0x5e>
    {
        dy = -dy;
     632:	f1 94       	neg	r15
     634:	e1 94       	neg	r14
     636:	f1 08       	sbc	r15, r1
        stepy = -1;
     638:	88 24       	eor	r8, r8
     63a:	8a 94       	dec	r8
     63c:	98 2c       	mov	r9, r8
     63e:	03 c0       	rjmp	.+6      	; 0x646 <WS2812_Draw_Line+0x64>
    }
    else
    {
        stepy = 1;
     640:	88 24       	eor	r8, r8
     642:	83 94       	inc	r8
     644:	91 2c       	mov	r9, r1
    }

    if (dx < 0)
     646:	55 20       	and	r5, r5
     648:	3c f4       	brge	.+14     	; 0x658 <WS2812_Draw_Line+0x76>
    {
        dx = -dx;
     64a:	51 94       	neg	r5
     64c:	41 94       	neg	r4
     64e:	51 08       	sbc	r5, r1
        stepx = -1;
     650:	cc 24       	eor	r12, r12
     652:	ca 94       	dec	r12
     654:	dc 2c       	mov	r13, r12
     656:	03 c0       	rjmp	.+6      	; 0x65e <WS2812_Draw_Line+0x7c>
    }
    else
    {
        stepx = 1;
     658:	cc 24       	eor	r12, r12
     65a:	c3 94       	inc	r12
     65c:	d1 2c       	mov	r13, r1
    }

    dx <<= 1;
     65e:	44 0c       	add	r4, r4
     660:	55 1c       	adc	r5, r5
    dy <<= 1;
     662:	ee 0c       	add	r14, r14
     664:	ff 1c       	adc	r15, r15

    WS2812_set_colour_xy(x1, y1, r, g, b);
     666:	01 2f       	mov	r16, r17
     668:	2a 81       	ldd	r18, Y+2	; 0x02
     66a:	49 81       	ldd	r20, Y+1	; 0x01
     66c:	6d 81       	ldd	r22, Y+5	; 0x05
     66e:	7e 81       	ldd	r23, Y+6	; 0x06
     670:	c5 01       	movw	r24, r10
     672:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>

    if(dx > dy)
     676:	e4 14       	cp	r14, r4
     678:	f5 04       	cpc	r15, r5
     67a:	24 f5       	brge	.+72     	; 0x6c4 <WS2812_Draw_Line+0xe2>
    {
        fraction = (dy - (dx >> 1));
     67c:	c2 01       	movw	r24, r4
     67e:	95 95       	asr	r25
     680:	87 95       	ror	r24
     682:	37 01       	movw	r6, r14
     684:	68 1a       	sub	r6, r24
     686:	79 0a       	sbc	r7, r25
        while (x1 != x2)
     688:	2a 14       	cp	r2, r10
     68a:	3b 04       	cpc	r3, r11
     68c:	09 f4       	brne	.+2      	; 0x690 <WS2812_Draw_Line+0xae>
     68e:	43 c0       	rjmp	.+134    	; 0x716 <WS2812_Draw_Line+0x134>
        {
            if(fraction >= 0)
     690:	77 20       	and	r7, r7
     692:	44 f0       	brlt	.+16     	; 0x6a4 <WS2812_Draw_Line+0xc2>
            {
                y1 += stepy;
     694:	2d 81       	ldd	r18, Y+5	; 0x05
     696:	3e 81       	ldd	r19, Y+6	; 0x06
     698:	28 0d       	add	r18, r8
     69a:	39 1d       	adc	r19, r9
     69c:	3e 83       	std	Y+6, r19	; 0x06
     69e:	2d 83       	std	Y+5, r18	; 0x05
                fraction -= dx;
     6a0:	64 18       	sub	r6, r4
     6a2:	75 08       	sbc	r7, r5
            }

            x1 += stepx;
     6a4:	ac 0c       	add	r10, r12
     6a6:	bd 1c       	adc	r11, r13
            fraction += dy;
     6a8:	6e 0c       	add	r6, r14
     6aa:	7f 1c       	adc	r7, r15

            WS2812_set_colour_xy(x1, y1, r, g, b);
     6ac:	01 2f       	mov	r16, r17
     6ae:	2a 81       	ldd	r18, Y+2	; 0x02
     6b0:	49 81       	ldd	r20, Y+1	; 0x01
     6b2:	6d 81       	ldd	r22, Y+5	; 0x05
     6b4:	7e 81       	ldd	r23, Y+6	; 0x06
     6b6:	c5 01       	movw	r24, r10
     6b8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
    WS2812_set_colour_xy(x1, y1, r, g, b);

    if(dx > dy)
    {
        fraction = (dy - (dx >> 1));
        while (x1 != x2)
     6bc:	2a 14       	cp	r2, r10
     6be:	3b 04       	cpc	r3, r11
     6c0:	39 f7       	brne	.-50     	; 0x690 <WS2812_Draw_Line+0xae>
     6c2:	29 c0       	rjmp	.+82     	; 0x716 <WS2812_Draw_Line+0x134>
            WS2812_set_colour_xy(x1, y1, r, g, b);
        }
    }
    else
    {
        fraction = (dx - (dy >> 1));
     6c4:	c7 01       	movw	r24, r14
     6c6:	95 95       	asr	r25
     6c8:	87 95       	ror	r24
     6ca:	32 01       	movw	r6, r4
     6cc:	68 1a       	sub	r6, r24
     6ce:	79 0a       	sbc	r7, r25
        while (y1 != y2)
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	2d 81       	ldd	r18, Y+5	; 0x05
     6d6:	3e 81       	ldd	r19, Y+6	; 0x06
     6d8:	82 17       	cp	r24, r18
     6da:	93 07       	cpc	r25, r19
     6dc:	e1 f0       	breq	.+56     	; 0x716 <WS2812_Draw_Line+0x134>
        {
            if (fraction >= 0)
     6de:	77 20       	and	r7, r7
     6e0:	24 f0       	brlt	.+8      	; 0x6ea <WS2812_Draw_Line+0x108>
            {
                x1 += stepx;
     6e2:	ac 0c       	add	r10, r12
     6e4:	bd 1c       	adc	r11, r13
                fraction -= dy;
     6e6:	6e 18       	sub	r6, r14
     6e8:	7f 08       	sbc	r7, r15
            }

            y1 += stepy;
     6ea:	8d 81       	ldd	r24, Y+5	; 0x05
     6ec:	9e 81       	ldd	r25, Y+6	; 0x06
     6ee:	88 0d       	add	r24, r8
     6f0:	99 1d       	adc	r25, r9
     6f2:	9e 83       	std	Y+6, r25	; 0x06
     6f4:	8d 83       	std	Y+5, r24	; 0x05
            fraction += dx;
     6f6:	64 0c       	add	r6, r4
     6f8:	75 1c       	adc	r7, r5

            WS2812_set_colour_xy(x1, y1, r, g, b);
     6fa:	01 2f       	mov	r16, r17
     6fc:	2a 81       	ldd	r18, Y+2	; 0x02
     6fe:	49 81       	ldd	r20, Y+1	; 0x01
     700:	bc 01       	movw	r22, r24
     702:	c5 01       	movw	r24, r10
     704:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
        }
    }
    else
    {
        fraction = (dx - (dy >> 1));
        while (y1 != y2)
     708:	2b 81       	ldd	r18, Y+3	; 0x03
     70a:	3c 81       	ldd	r19, Y+4	; 0x04
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	9e 81       	ldd	r25, Y+6	; 0x06
     710:	28 17       	cp	r18, r24
     712:	39 07       	cpc	r19, r25
     714:	21 f7       	brne	.-56     	; 0x6de <WS2812_Draw_Line+0xfc>
            fraction += dx;

            WS2812_set_colour_xy(x1, y1, r, g, b);
        }
    }
}
     716:	26 96       	adiw	r28, 0x06	; 6
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	7f 90       	pop	r7
     73c:	6f 90       	pop	r6
     73e:	5f 90       	pop	r5
     740:	4f 90       	pop	r4
     742:	3f 90       	pop	r3
     744:	2f 90       	pop	r2
     746:	08 95       	ret

00000748 <WS2812_Draw_V_Line>:


void WS2812_Draw_V_Line(signed int x1, signed int y1, signed int y2, unsigned char r, unsigned char g, unsigned char b)
{
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	5c 01       	movw	r10, r24
     75e:	ea 01       	movw	r28, r20
     760:	12 2f       	mov	r17, r18
     762:	f0 2e       	mov	r15, r16
    if(y1 > y2)
     764:	46 17       	cp	r20, r22
     766:	57 07       	cpc	r21, r23
     768:	2c f4       	brge	.+10     	; 0x774 <WS2812_Draw_V_Line+0x2c>
     76a:	96 2f       	mov	r25, r22
     76c:	87 2f       	mov	r24, r23
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
    *a = temp;
     76e:	ba 01       	movw	r22, r20
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     770:	c9 2f       	mov	r28, r25
     772:	d8 2f       	mov	r29, r24
    if(y1 > y2)
    {
       swap(&y1, &y2);
    }

    while(y2 > (y1 - 1))
     774:	6b 01       	movw	r12, r22
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	c8 1a       	sub	r12, r24
     77a:	d1 08       	sbc	r13, r1
     77c:	cc 16       	cp	r12, r28
     77e:	dd 06       	cpc	r13, r29
     780:	5c f4       	brge	.+22     	; 0x798 <WS2812_Draw_V_Line+0x50>
    {
        WS2812_set_colour_xy(x1, y2, r, g, b);
     782:	0e 2d       	mov	r16, r14
     784:	2f 2d       	mov	r18, r15
     786:	41 2f       	mov	r20, r17
     788:	be 01       	movw	r22, r28
     78a:	c5 01       	movw	r24, r10
     78c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
        y2--;
     790:	21 97       	sbiw	r28, 0x01	; 1
    if(y1 > y2)
    {
       swap(&y1, &y2);
    }

    while(y2 > (y1 - 1))
     792:	cc 16       	cp	r12, r28
     794:	dd 06       	cpc	r13, r29
     796:	ac f3       	brlt	.-22     	; 0x782 <WS2812_Draw_V_Line+0x3a>
    {
        WS2812_set_colour_xy(x1, y2, r, g, b);
        y2--;
    }
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	08 95       	ret

000007ae <WS2812_Draw_H_Line>:


void WS2812_Draw_H_Line(signed int x1, signed int x2, signed int y1, unsigned char r, unsigned char g, unsigned char b)
{
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	eb 01       	movw	r28, r22
     7c4:	5a 01       	movw	r10, r20
     7c6:	12 2f       	mov	r17, r18
     7c8:	f0 2e       	mov	r15, r16
    if(x1 > x2)
     7ca:	68 17       	cp	r22, r24
     7cc:	79 07       	cpc	r23, r25
     7ce:	2c f4       	brge	.+10     	; 0x7da <WS2812_Draw_H_Line+0x2c>
     7d0:	38 2f       	mov	r19, r24
     7d2:	29 2f       	mov	r18, r25
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
    *a = temp;
     7d4:	cb 01       	movw	r24, r22
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     7d6:	c3 2f       	mov	r28, r19
     7d8:	d2 2f       	mov	r29, r18
    if(x1 > x2)
    {
       swap(&x1, &x2);
    }

    while(x2 > (x1 - 1))
     7da:	6c 01       	movw	r12, r24
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	c2 1a       	sub	r12, r18
     7e0:	d1 08       	sbc	r13, r1
     7e2:	cc 16       	cp	r12, r28
     7e4:	dd 06       	cpc	r13, r29
     7e6:	5c f4       	brge	.+22     	; 0x7fe <WS2812_Draw_H_Line+0x50>
    {
        WS2812_set_colour_xy(x2, y1, r, g, b);
     7e8:	0e 2d       	mov	r16, r14
     7ea:	2f 2d       	mov	r18, r15
     7ec:	41 2f       	mov	r20, r17
     7ee:	b5 01       	movw	r22, r10
     7f0:	ce 01       	movw	r24, r28
     7f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
        x2--;
     7f6:	21 97       	sbiw	r28, 0x01	; 1
    if(x1 > x2)
    {
       swap(&x1, &x2);
    }

    while(x2 > (x1 - 1))
     7f8:	cc 16       	cp	r12, r28
     7fa:	dd 06       	cpc	r13, r29
     7fc:	ac f3       	brlt	.-22     	; 0x7e8 <WS2812_Draw_H_Line+0x3a>
    {
        WS2812_set_colour_xy(x2, y1, r, g, b);
        x2--;
    }
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	bf 90       	pop	r11
     810:	af 90       	pop	r10
     812:	08 95       	ret

00000814 <WS2812_Draw_Rectangle>:


void WS2812_Draw_Rectangle(signed int x1, signed int y1, signed int x2, signed int y2, unsigned char fill, unsigned char r, unsigned char g, unsigned char b)
{
     814:	4f 92       	push	r4
     816:	5f 92       	push	r5
     818:	6f 92       	push	r6
     81a:	7f 92       	push	r7
     81c:	8f 92       	push	r8
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	3c 01       	movw	r6, r24
     836:	2b 01       	movw	r4, r22
     838:	4a 01       	movw	r8, r20
     83a:	e9 01       	movw	r28, r18
     83c:	1e 2d       	mov	r17, r14
     83e:	bc 2c       	mov	r11, r12
     unsigned short xmin = 0;
     unsigned short xmax = 0;
     unsigned short ymin = 0;
     unsigned short ymax = 0;

     if(fill != NO)
     840:	00 23       	and	r16, r16
     842:	49 f1       	breq	.+82     	; 0x896 <WS2812_Draw_Rectangle+0x82>
     {
        if(x1 < x2)
     844:	84 17       	cp	r24, r20
     846:	95 07       	cpc	r25, r21
     848:	1c f4       	brge	.+6      	; 0x850 <WS2812_Draw_Rectangle+0x3c>
        {
           xmin = x1;
     84a:	7c 01       	movw	r14, r24
           xmax = x2;
     84c:	3a 01       	movw	r6, r20
     84e:	01 c0       	rjmp	.+2      	; 0x852 <WS2812_Draw_Rectangle+0x3e>
        }
        else
        {
           xmin = x2;
     850:	7a 01       	movw	r14, r20
           xmax = x1;
        }

        if(y1 < y2)
     852:	4c 16       	cp	r4, r28
     854:	5d 06       	cpc	r5, r29
     856:	34 f4       	brge	.+12     	; 0x864 <WS2812_Draw_Rectangle+0x50>
        {
           ymin = y1;
     858:	42 01       	movw	r8, r4
           ymax = y2;
     85a:	6e 01       	movw	r12, r28
        {
           ymin = y2;
           ymax = y1;
        }

        for(; xmin <= xmax; ++xmin)
     85c:	6e 14       	cp	r6, r14
     85e:	7f 04       	cpc	r7, r15
     860:	b0 f4       	brcc	.+44     	; 0x88e <WS2812_Draw_Rectangle+0x7a>
     862:	31 c0       	rjmp	.+98     	; 0x8c6 <WS2812_Draw_Rectangle+0xb2>
           ymin = y1;
           ymax = y2;
        }
        else
        {
           ymin = y2;
     864:	4e 01       	movw	r8, r28
           ymax = y1;
     866:	62 01       	movw	r12, r4
     868:	f9 cf       	rjmp	.-14     	; 0x85c <WS2812_Draw_Rectangle+0x48>
        }

        for(; xmin <= xmax; ++xmin)
        {
           for(i = ymin; i <= ymax; ++i)
     86a:	e4 01       	movw	r28, r8
           {
               WS2812_set_colour_xy(xmin, i, r, g, b);
     86c:	0a 2d       	mov	r16, r10
     86e:	2b 2d       	mov	r18, r11
     870:	41 2f       	mov	r20, r17
     872:	be 01       	movw	r22, r28
     874:	c7 01       	movw	r24, r14
     876:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
           ymax = y1;
        }

        for(; xmin <= xmax; ++xmin)
        {
           for(i = ymin; i <= ymax; ++i)
     87a:	21 96       	adiw	r28, 0x01	; 1
     87c:	cc 16       	cp	r12, r28
     87e:	dd 06       	cpc	r13, r29
     880:	a8 f7       	brcc	.-22     	; 0x86c <WS2812_Draw_Rectangle+0x58>
        {
           ymin = y2;
           ymax = y1;
        }

        for(; xmin <= xmax; ++xmin)
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	e8 1a       	sub	r14, r24
     886:	f8 0a       	sbc	r15, r24
     888:	6e 14       	cp	r6, r14
     88a:	7f 04       	cpc	r7, r15
     88c:	e0 f0       	brcs	.+56     	; 0x8c6 <WS2812_Draw_Rectangle+0xb2>
        {
           for(i = ymin; i <= ymax; ++i)
     88e:	c8 14       	cp	r12, r8
     890:	d9 04       	cpc	r13, r9
     892:	58 f7       	brcc	.-42     	; 0x86a <WS2812_Draw_Rectangle+0x56>
     894:	f6 cf       	rjmp	.-20     	; 0x882 <WS2812_Draw_Rectangle+0x6e>
         }
     }

     else
     {
        WS2812_Draw_Line(x1, y1, x2, y1, r, g, b);
     896:	ca 2c       	mov	r12, r10
     898:	eb 2c       	mov	r14, r11
     89a:	01 2f       	mov	r16, r17
     89c:	9b 01       	movw	r18, r22
     89e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
        WS2812_Draw_Line(x1, y2, x2, y2, r, g, b);
     8a2:	9e 01       	movw	r18, r28
     8a4:	a4 01       	movw	r20, r8
     8a6:	be 01       	movw	r22, r28
     8a8:	c3 01       	movw	r24, r6
     8aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
        WS2812_Draw_Line(x1, y1, x1, y2, r, g, b);
     8ae:	9e 01       	movw	r18, r28
     8b0:	a3 01       	movw	r20, r6
     8b2:	b2 01       	movw	r22, r4
     8b4:	c3 01       	movw	r24, r6
     8b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
        WS2812_Draw_Line(x2, y1, x2, y2, r, g, b);
     8ba:	9e 01       	movw	r18, r28
     8bc:	a4 01       	movw	r20, r8
     8be:	b2 01       	movw	r22, r4
     8c0:	c4 01       	movw	r24, r8
     8c2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
     }
}
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	bf 90       	pop	r11
     8d8:	af 90       	pop	r10
     8da:	9f 90       	pop	r9
     8dc:	8f 90       	pop	r8
     8de:	7f 90       	pop	r7
     8e0:	6f 90       	pop	r6
     8e2:	5f 90       	pop	r5
     8e4:	4f 90       	pop	r4
     8e6:	08 95       	ret

000008e8 <WS2812_Draw_Triangle>:


void WS2812_Draw_Triangle(signed int x1, signed int y1, signed int x2, signed int y2, signed int x3, signed int y3, unsigned char fill, unsigned char r, unsigned char g, unsigned char b)
{
     8e8:	2f 92       	push	r2
     8ea:	3f 92       	push	r3
     8ec:	4f 92       	push	r4
     8ee:	5f 92       	push	r5
     8f0:	6f 92       	push	r6
     8f2:	7f 92       	push	r7
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	65 97       	sbiw	r28, 0x15	; 21
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	3c 01       	movw	r6, r24
     91e:	7b 87       	std	Y+11, r23	; 0x0b
     920:	6a 87       	std	Y+10, r22	; 0x0a
     922:	5e 83       	std	Y+6, r21	; 0x06
     924:	4d 83       	std	Y+5, r20	; 0x05
     926:	38 87       	std	Y+8, r19	; 0x08
     928:	2f 83       	std	Y+7, r18	; 0x07
     92a:	28 01       	movw	r4, r16
     92c:	fa 82       	std	Y+2, r15	; 0x02
     92e:	e9 82       	std	Y+1, r14	; 0x01
     930:	fa 2c       	mov	r15, r10
     932:	89 86       	std	Y+9, r8	; 0x09
     934:	1a a5       	ldd	r17, Y+42	; 0x2a
    signed int dx13 = 0;
    signed int dy12 = 0;
    signed int dy23 = 0;
    signed int dy13 = 0;

    switch(fill)
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	c2 12       	cpse	r12, r18
     93a:	2a c1       	rjmp	.+596    	; 0xb90 <__stack+0x291>
    {
        case YES:
        {
            if(y1 > y2)
     93c:	8f 81       	ldd	r24, Y+7	; 0x07
     93e:	98 85       	ldd	r25, Y+8	; 0x08
     940:	86 17       	cp	r24, r22
     942:	97 07       	cpc	r25, r23
     944:	0c f0       	brlt	.+2      	; 0x948 <__stack+0x49>
     946:	43 c1       	rjmp	.+646    	; 0xbce <__stack+0x2cf>
            {
                swap(&y1, &y2);
                swap(&x1, &x2);
            }
            if(y2 > y3)
     948:	29 81       	ldd	r18, Y+1	; 0x01
     94a:	3a 81       	ldd	r19, Y+2	; 0x02
     94c:	26 17       	cp	r18, r22
     94e:	37 07       	cpc	r19, r23
     950:	dc f4       	brge	.+54     	; 0x988 <__stack+0x89>
     952:	9f 81       	ldd	r25, Y+7	; 0x07
     954:	88 85       	ldd	r24, Y+8	; 0x08
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     956:	78 87       	std	Y+8, r23	; 0x08
     958:	6f 83       	std	Y+7, r22	; 0x07
    *a = temp;
     95a:	9a 87       	std	Y+10, r25	; 0x0a
     95c:	8b 87       	std	Y+11, r24	; 0x0b
     95e:	9d 81       	ldd	r25, Y+5	; 0x05
     960:	8e 81       	ldd	r24, Y+6	; 0x06
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     962:	7e 82       	std	Y+6, r7	; 0x06
     964:	6d 82       	std	Y+5, r6	; 0x05
    *a = temp;
     966:	69 2e       	mov	r6, r25
     968:	78 2e       	mov	r7, r24
     96a:	9f 81       	ldd	r25, Y+7	; 0x07
     96c:	88 85       	ldd	r24, Y+8	; 0x08
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     96e:	29 81       	ldd	r18, Y+1	; 0x01
     970:	3a 81       	ldd	r19, Y+2	; 0x02
     972:	38 87       	std	Y+8, r19	; 0x08
     974:	2f 83       	std	Y+7, r18	; 0x07
     976:	99 83       	std	Y+1, r25	; 0x01
     978:	8a 83       	std	Y+2, r24	; 0x02
     97a:	9d 81       	ldd	r25, Y+5	; 0x05
     97c:	8e 81       	ldd	r24, Y+6	; 0x06
     97e:	5e 82       	std	Y+6, r5	; 0x06
     980:	4d 82       	std	Y+5, r4	; 0x05
     982:	49 2e       	mov	r4, r25
     984:	58 2e       	mov	r5, r24
     986:	0e c0       	rjmp	.+28     	; 0x9a4 <__stack+0xa5>
     988:	9f 81       	ldd	r25, Y+7	; 0x07
     98a:	88 85       	ldd	r24, Y+8	; 0x08
     98c:	2a 85       	ldd	r18, Y+10	; 0x0a
     98e:	3b 85       	ldd	r19, Y+11	; 0x0b
     990:	38 87       	std	Y+8, r19	; 0x08
     992:	2f 83       	std	Y+7, r18	; 0x07
    *a = temp;
     994:	9a 87       	std	Y+10, r25	; 0x0a
     996:	8b 87       	std	Y+11, r24	; 0x0b
     998:	9d 81       	ldd	r25, Y+5	; 0x05
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     99c:	7e 82       	std	Y+6, r7	; 0x06
     99e:	6d 82       	std	Y+5, r6	; 0x05
    *a = temp;
     9a0:	69 2e       	mov	r6, r25
     9a2:	78 2e       	mov	r7, r24
            if(y2 > y3)
            {
                swap(&y3, &y2);
                swap(&x3, &x2);
            }
            if(y1 > y2)
     9a4:	8f 81       	ldd	r24, Y+7	; 0x07
     9a6:	98 85       	ldd	r25, Y+8	; 0x08
     9a8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9aa:	3b 85       	ldd	r19, Y+11	; 0x0b
     9ac:	82 17       	cp	r24, r18
     9ae:	93 07       	cpc	r25, r19
     9b0:	74 f4       	brge	.+28     	; 0x9ce <__stack+0xcf>
     9b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9b6:	2f 81       	ldd	r18, Y+7	; 0x07
     9b8:	38 85       	ldd	r19, Y+8	; 0x08
     9ba:	3b 87       	std	Y+11, r19	; 0x0b
     9bc:	2a 87       	std	Y+10, r18	; 0x0a
     9be:	9f 83       	std	Y+7, r25	; 0x07
     9c0:	88 87       	std	Y+8, r24	; 0x08
     9c2:	96 2d       	mov	r25, r6
     9c4:	87 2d       	mov	r24, r7
     9c6:	6d 80       	ldd	r6, Y+5	; 0x05
     9c8:	7e 80       	ldd	r7, Y+6	; 0x06
     9ca:	9d 83       	std	Y+5, r25	; 0x05
     9cc:	8e 83       	std	Y+6, r24	; 0x06
            {
                swap(&y1, &y2);
                swap(&x1, &x2);
            }

            if(y1 == y3)
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	2a 85       	ldd	r18, Y+10	; 0x0a
     9d4:	3b 85       	ldd	r19, Y+11	; 0x0b
     9d6:	82 17       	cp	r24, r18
     9d8:	93 07       	cpc	r25, r19
     9da:	79 f4       	brne	.+30     	; 0x9fa <__stack+0xfb>
            {
                a = d = x1;

                if(x2 < a)
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	86 15       	cp	r24, r6
     9e2:	97 05       	cpc	r25, r7
     9e4:	0c f4       	brge	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	fc c0       	rjmp	.+504    	; 0xbe0 <__stack+0x2e1>
     9e8:	36 2d       	mov	r19, r6
     9ea:	27 2d       	mov	r18, r7
     9ec:	68 16       	cp	r6, r24
     9ee:	79 06       	cpc	r7, r25
     9f0:	14 f4       	brge	.+4      	; 0x9f6 <__stack+0xf7>
     9f2:	3d 81       	ldd	r19, Y+5	; 0x05
     9f4:	2e 81       	ldd	r18, Y+6	; 0x06
                swap(&x1, &x2);
            }

            if(y1 == y3)
            {
                a = d = x1;
     9f6:	c3 01       	movw	r24, r6
     9f8:	f7 c0       	rjmp	.+494    	; 0xbe8 <__stack+0x2e9>

                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), y1, r, g, b);
                return;
            }

            dx12 = (x2 - x1);
     9fa:	2d 81       	ldd	r18, Y+5	; 0x05
     9fc:	3e 81       	ldd	r19, Y+6	; 0x06
     9fe:	26 19       	sub	r18, r6
     a00:	37 09       	sbc	r19, r7
     a02:	3f 87       	std	Y+15, r19	; 0x0f
     a04:	2e 87       	std	Y+14, r18	; 0x0e
            dy12 = (y2 - y1);
     a06:	8f 81       	ldd	r24, Y+7	; 0x07
     a08:	98 85       	ldd	r25, Y+8	; 0x08
     a0a:	2a 85       	ldd	r18, Y+10	; 0x0a
     a0c:	3b 85       	ldd	r19, Y+11	; 0x0b
     a0e:	82 1b       	sub	r24, r18
     a10:	93 0b       	sbc	r25, r19
     a12:	99 8b       	std	Y+17, r25	; 0x11
     a14:	88 8b       	std	Y+16, r24	; 0x10
            dx13 = (x3 - x1);
     a16:	52 01       	movw	r10, r4
     a18:	a6 18       	sub	r10, r6
     a1a:	b7 08       	sbc	r11, r7
            dy13 = (y3 - y1);
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	82 1b       	sub	r24, r18
     a22:	93 0b       	sbc	r25, r19
     a24:	9c 83       	std	Y+4, r25	; 0x04
     a26:	8b 83       	std	Y+3, r24	; 0x03
            dx23 = (x3 - x2);
     a28:	42 01       	movw	r8, r4
     a2a:	2d 81       	ldd	r18, Y+5	; 0x05
     a2c:	3e 81       	ldd	r19, Y+6	; 0x06
     a2e:	82 1a       	sub	r8, r18
     a30:	93 0a       	sbc	r9, r19
            dy23 = (y3 - y2);
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	2f 81       	ldd	r18, Y+7	; 0x07
     a38:	38 85       	ldd	r19, Y+8	; 0x08
     a3a:	82 1b       	sub	r24, r18
     a3c:	93 0b       	sbc	r25, r19
     a3e:	9b 8b       	std	Y+19, r25	; 0x13
     a40:	8a 8b       	std	Y+18, r24	; 0x12
            sa = 0,
            sb = 0;

            if(y2 == y3)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	29 f0       	breq	.+10     	; 0xa56 <__stack+0x157>
            {
                last = y2;
            }
            else
            {
                last = (y2 - 1);
     a4c:	21 50       	subi	r18, 0x01	; 1
     a4e:	31 09       	sbc	r19, r1
     a50:	3d 87       	std	Y+13, r19	; 0x0d
     a52:	2c 87       	std	Y+12, r18	; 0x0c
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <__stack+0x15f>
     a56:	2f 81       	ldd	r18, Y+7	; 0x07
     a58:	38 85       	ldd	r19, Y+8	; 0x08
     a5a:	3d 87       	std	Y+13, r19	; 0x0d
     a5c:	2c 87       	std	Y+12, r18	; 0x0c
            }

            for(yp = y1; yp <= last; yp++)
     a5e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a60:	9d 85       	ldd	r25, Y+13	; 0x0d
     a62:	2a 85       	ldd	r18, Y+10	; 0x0a
     a64:	3b 85       	ldd	r19, Y+11	; 0x0b
     a66:	82 17       	cp	r24, r18
     a68:	93 07       	cpc	r25, r19
     a6a:	0c f4       	brge	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	3f c0       	rjmp	.+126    	; 0xaec <__stack+0x1ed>
     a6e:	69 01       	movw	r12, r18
     a70:	41 2c       	mov	r4, r1
     a72:	51 2c       	mov	r5, r1
     a74:	21 2c       	mov	r2, r1
     a76:	31 2c       	mov	r3, r1
     a78:	9d 8a       	std	Y+21, r9	; 0x15
     a7a:	8c 8a       	std	Y+20, r8	; 0x14
     a7c:	91 2e       	mov	r9, r17
     a7e:	19 85       	ldd	r17, Y+9	; 0x09
            {
                a = (x1 + (sa / dy12));
     a80:	c1 01       	movw	r24, r2
     a82:	68 89       	ldd	r22, Y+16	; 0x10
     a84:	79 89       	ldd	r23, Y+17	; 0x11
     a86:	0e 94 34 07 	call	0xe68	; 0xe68 <__divmodhi4>
     a8a:	fb 01       	movw	r30, r22
     a8c:	e6 0d       	add	r30, r6
     a8e:	f7 1d       	adc	r31, r7
                d = (x1 + (sb / dy13));
     a90:	c2 01       	movw	r24, r4
     a92:	6b 81       	ldd	r22, Y+3	; 0x03
     a94:	7c 81       	ldd	r23, Y+4	; 0x04
     a96:	0e 94 34 07 	call	0xe68	; 0xe68 <__divmodhi4>
     a9a:	66 0d       	add	r22, r6
     a9c:	77 1d       	adc	r23, r7
                sa += dx12;
     a9e:	8e 85       	ldd	r24, Y+14	; 0x0e
     aa0:	9f 85       	ldd	r25, Y+15	; 0x0f
     aa2:	28 0e       	add	r2, r24
     aa4:	39 1e       	adc	r3, r25
                sb += dx13;
     aa6:	4a 0c       	add	r4, r10
     aa8:	5b 1c       	adc	r5, r11
                if(a > d)
     aaa:	6e 17       	cp	r22, r30
     aac:	7f 07       	cpc	r23, r31
     aae:	2c f4       	brge	.+10     	; 0xaba <__stack+0x1bb>
     ab0:	9e 2f       	mov	r25, r30
     ab2:	8f 2f       	mov	r24, r31
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
    *a = temp;
     ab4:	fb 01       	movw	r30, r22
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     ab6:	69 2f       	mov	r22, r25
     ab8:	78 2f       	mov	r23, r24
                sb += dx13;
                if(a > d)
                {
                    swap(&a, &d);
                }
                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), yp, r, g, b);
     aba:	cf 01       	movw	r24, r30
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	68 1b       	sub	r22, r24
     ac0:	79 0b       	sbc	r23, r25
     ac2:	6e 0f       	add	r22, r30
     ac4:	7f 1f       	adc	r23, r31
     ac6:	e9 2c       	mov	r14, r9
     ac8:	01 2f       	mov	r16, r17
     aca:	2f 2d       	mov	r18, r15
     acc:	a6 01       	movw	r20, r12
     ace:	cf 01       	movw	r24, r30
     ad0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
            else
            {
                last = (y2 - 1);
            }

            for(yp = y1; yp <= last; yp++)
     ad4:	9f ef       	ldi	r25, 0xFF	; 255
     ad6:	c9 1a       	sub	r12, r25
     ad8:	d9 0a       	sbc	r13, r25
     ada:	2c 85       	ldd	r18, Y+12	; 0x0c
     adc:	3d 85       	ldd	r19, Y+13	; 0x0d
     ade:	2c 15       	cp	r18, r12
     ae0:	3d 05       	cpc	r19, r13
     ae2:	74 f6       	brge	.-100    	; 0xa80 <__stack+0x181>
     ae4:	19 2d       	mov	r17, r9
     ae6:	8c 88       	ldd	r8, Y+20	; 0x14
     ae8:	9d 88       	ldd	r9, Y+21	; 0x15
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <__stack+0x1f1>
     aec:	ca 84       	ldd	r12, Y+10	; 0x0a
     aee:	db 84       	ldd	r13, Y+11	; 0x0b
                    swap(&a, &d);
                }
                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), yp, r, g, b);
            }

            sa = (dx23 * (yp - y2));
     af0:	c6 01       	movw	r24, r12
     af2:	2f 81       	ldd	r18, Y+7	; 0x07
     af4:	38 85       	ldd	r19, Y+8	; 0x08
     af6:	82 1b       	sub	r24, r18
     af8:	93 0b       	sbc	r25, r19
     afa:	88 9d       	mul	r24, r8
     afc:	10 01       	movw	r2, r0
     afe:	89 9d       	mul	r24, r9
     b00:	30 0c       	add	r3, r0
     b02:	98 9d       	mul	r25, r8
     b04:	30 0c       	add	r3, r0
     b06:	11 24       	eor	r1, r1
            sb = (dx13 * (yp - y1));
     b08:	c6 01       	movw	r24, r12
     b0a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b0c:	3b 85       	ldd	r19, Y+11	; 0x0b
     b0e:	82 1b       	sub	r24, r18
     b10:	93 0b       	sbc	r25, r19
     b12:	8a 9d       	mul	r24, r10
     b14:	20 01       	movw	r4, r0
     b16:	8b 9d       	mul	r24, r11
     b18:	50 0c       	add	r5, r0
     b1a:	9a 9d       	mul	r25, r10
     b1c:	50 0c       	add	r5, r0
     b1e:	11 24       	eor	r1, r1
            for(; yp <= y3; yp++)
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	8c 15       	cp	r24, r12
     b26:	9d 05       	cpc	r25, r13
     b28:	0c f4       	brge	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	72 c0       	rjmp	.+228    	; 0xc10 <__stack+0x311>
            {
                a = (x2 + (sa / dy23));
     b2c:	c1 01       	movw	r24, r2
     b2e:	6a 89       	ldd	r22, Y+18	; 0x12
     b30:	7b 89       	ldd	r23, Y+19	; 0x13
     b32:	0e 94 34 07 	call	0xe68	; 0xe68 <__divmodhi4>
     b36:	ed 81       	ldd	r30, Y+5	; 0x05
     b38:	fe 81       	ldd	r31, Y+6	; 0x06
     b3a:	e6 0f       	add	r30, r22
     b3c:	f7 1f       	adc	r31, r23
                d = (x1 + (sb / dy13));
     b3e:	c2 01       	movw	r24, r4
     b40:	6b 81       	ldd	r22, Y+3	; 0x03
     b42:	7c 81       	ldd	r23, Y+4	; 0x04
     b44:	0e 94 34 07 	call	0xe68	; 0xe68 <__divmodhi4>
     b48:	66 0d       	add	r22, r6
     b4a:	77 1d       	adc	r23, r7
                sa += dx23;
     b4c:	28 0c       	add	r2, r8
     b4e:	39 1c       	adc	r3, r9
                sb += dx13;
     b50:	4a 0c       	add	r4, r10
     b52:	5b 1c       	adc	r5, r11

                if(a > d)
     b54:	6e 17       	cp	r22, r30
     b56:	7f 07       	cpc	r23, r31
     b58:	2c f4       	brge	.+10     	; 0xb64 <__stack+0x265>
     b5a:	9e 2f       	mov	r25, r30
     b5c:	8f 2f       	mov	r24, r31
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
    *a = temp;
     b5e:	fb 01       	movw	r30, r22
void swap(signed int *a, signed int *b)
{
    signed int temp = 0x0000;

    temp = *b;
    *b = *a;
     b60:	69 2f       	mov	r22, r25
     b62:	78 2f       	mov	r23, r24

                if(a > d)
                {
                    swap(&a, &d);
                }
                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), yp, r, g, b);
     b64:	cf 01       	movw	r24, r30
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	68 1b       	sub	r22, r24
     b6a:	79 0b       	sbc	r23, r25
     b6c:	6e 0f       	add	r22, r30
     b6e:	7f 1f       	adc	r23, r31
     b70:	e1 2e       	mov	r14, r17
     b72:	09 85       	ldd	r16, Y+9	; 0x09
     b74:	2f 2d       	mov	r18, r15
     b76:	a6 01       	movw	r20, r12
     b78:	cf 01       	movw	r24, r30
     b7a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), yp, r, g, b);
            }

            sa = (dx23 * (yp - y2));
            sb = (dx13 * (yp - y1));
            for(; yp <= y3; yp++)
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
     b80:	c9 1a       	sub	r12, r25
     b82:	d9 0a       	sbc	r13, r25
     b84:	29 81       	ldd	r18, Y+1	; 0x01
     b86:	3a 81       	ldd	r19, Y+2	; 0x02
     b88:	2c 15       	cp	r18, r12
     b8a:	3d 05       	cpc	r19, r13
     b8c:	7c f6       	brge	.-98     	; 0xb2c <__stack+0x22d>
     b8e:	40 c0       	rjmp	.+128    	; 0xc10 <__stack+0x311>

            break;
        }
        default:
        {
            WS2812_Draw_Line(x1, y1, x2, y2, r, g, b);
     b90:	c1 2e       	mov	r12, r17
     b92:	e9 84       	ldd	r14, Y+9	; 0x09
     b94:	0a 2d       	mov	r16, r10
     b96:	2f 81       	ldd	r18, Y+7	; 0x07
     b98:	38 85       	ldd	r19, Y+8	; 0x08
     b9a:	4d 81       	ldd	r20, Y+5	; 0x05
     b9c:	5e 81       	ldd	r21, Y+6	; 0x06
     b9e:	6a 85       	ldd	r22, Y+10	; 0x0a
     ba0:	7b 85       	ldd	r23, Y+11	; 0x0b
     ba2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
            WS2812_Draw_Line(x2, y2, x3, y3, r, g, b);
     ba6:	e9 84       	ldd	r14, Y+9	; 0x09
     ba8:	29 81       	ldd	r18, Y+1	; 0x01
     baa:	3a 81       	ldd	r19, Y+2	; 0x02
     bac:	a2 01       	movw	r20, r4
     bae:	6f 81       	ldd	r22, Y+7	; 0x07
     bb0:	78 85       	ldd	r23, Y+8	; 0x08
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>
            WS2812_Draw_Line(x3, y3, x1, y1, r, g, b);
     bba:	e9 84       	ldd	r14, Y+9	; 0x09
     bbc:	2a 85       	ldd	r18, Y+10	; 0x0a
     bbe:	3b 85       	ldd	r19, Y+11	; 0x0b
     bc0:	a3 01       	movw	r20, r6
     bc2:	69 81       	ldd	r22, Y+1	; 0x01
     bc4:	7a 81       	ldd	r23, Y+2	; 0x02
     bc6:	c2 01       	movw	r24, r4
     bc8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <WS2812_Draw_Line>

            break;
     bcc:	21 c0       	rjmp	.+66     	; 0xc10 <__stack+0x311>
            if(y1 > y2)
            {
                swap(&y1, &y2);
                swap(&x1, &x2);
            }
            if(y2 > y3)
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	2f 81       	ldd	r18, Y+7	; 0x07
     bd4:	38 85       	ldd	r19, Y+8	; 0x08
     bd6:	82 17       	cp	r24, r18
     bd8:	93 07       	cpc	r25, r19
     bda:	0c f0       	brlt	.+2      	; 0xbde <__stack+0x2df>
     bdc:	f8 ce       	rjmp	.-528    	; 0x9ce <__stack+0xcf>
     bde:	c5 ce       	rjmp	.-630    	; 0x96a <__stack+0x6b>
                swap(&x1, &x2);
            }

            if(y1 == y3)
            {
                a = d = x1;
     be0:	36 2d       	mov	r19, r6
     be2:	27 2d       	mov	r18, r7

                if(x2 < a)
                {
                    a = x2;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
                else if(x3 > d)
                {
                    d = x3;
                }

                WS2812_Draw_H_Line(a, (a + (d - (a + 1))), y1, r, g, b);
     be8:	63 2f       	mov	r22, r19
     bea:	72 2f       	mov	r23, r18
     bec:	64 15       	cp	r22, r4
     bee:	75 05       	cpc	r23, r5
     bf0:	0c f4       	brge	.+2      	; 0xbf4 <__stack+0x2f5>
     bf2:	b2 01       	movw	r22, r4
     bf4:	9c 01       	movw	r18, r24
     bf6:	2f 5f       	subi	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	62 1b       	sub	r22, r18
     bfc:	73 0b       	sbc	r23, r19
     bfe:	68 0f       	add	r22, r24
     c00:	79 1f       	adc	r23, r25
     c02:	e1 2e       	mov	r14, r17
     c04:	09 85       	ldd	r16, Y+9	; 0x09
     c06:	2f 2d       	mov	r18, r15
     c08:	49 81       	ldd	r20, Y+1	; 0x01
     c0a:	5a 81       	ldd	r21, Y+2	; 0x02
     c0c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
            WS2812_Draw_Line(x3, y3, x1, y1, r, g, b);

            break;
        }
    }
}
     c10:	65 96       	adiw	r28, 0x15	; 21
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	7f 90       	pop	r7
     c36:	6f 90       	pop	r6
     c38:	5f 90       	pop	r5
     c3a:	4f 90       	pop	r4
     c3c:	3f 90       	pop	r3
     c3e:	2f 90       	pop	r2
     c40:	08 95       	ret

00000c42 <WS2812_Draw_Circle>:


void WS2812_Draw_Circle(signed int xc, signed int yc, signed int radius, unsigned char fill, unsigned char r, unsigned char g, unsigned char b)
{
     c42:	2f 92       	push	r2
     c44:	3f 92       	push	r3
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	2e 97       	sbiw	r28, 0x0e	; 14
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	1c 01       	movw	r2, r24
     c78:	2b 01       	movw	r4, r22
     c7a:	2c 87       	std	Y+12, r18	; 0x0c
   signed int a = 0;
   signed int d = 0;
   signed int p = 0;

   d = radius;
   p = (1 - d);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	4c 01       	movw	r8, r24
     c82:	84 1a       	sub	r8, r20
     c84:	95 0a       	sbc	r9, r21
     c86:	7f 83       	std	Y+7, r23	; 0x07
     c88:	6e 83       	std	Y+6, r22	; 0x06
     c8a:	79 87       	std	Y+9, r23	; 0x09
     c8c:	68 87       	std	Y+8, r22	; 0x08
     c8e:	51 01       	movw	r10, r2
     c90:	66 24       	eor	r6, r6
     c92:	63 94       	inc	r6
     c94:	71 2c       	mov	r7, r1
     c96:	5e 87       	std	Y+14, r21	; 0x0e
     c98:	4d 87       	std	Y+13, r20	; 0x0d
     c9a:	fe 2c       	mov	r15, r14
     c9c:	10 2f       	mov	r17, r16
     c9e:	cd 82       	std	Y+5, r12	; 0x05
     ca0:	61 01       	movw	r12, r2
     ca2:	93 01       	movw	r18, r6
     ca4:	21 50       	subi	r18, 0x01	; 1
     ca6:	31 09       	sbc	r19, r1
     ca8:	3b 87       	std	Y+11, r19	; 0x0b
     caa:	2a 87       	std	Y+10, r18	; 0x0a

   do
   {    switch(fill)
     cac:	3c 85       	ldd	r19, Y+12	; 0x0c
     cae:	31 30       	cpi	r19, 0x01	; 1
     cb0:	b1 f5       	brne	.+108    	; 0xd1e <WS2812_Draw_Circle+0xdc>
        {
            case YES:
            {
                WS2812_Draw_H_Line((xc - a), (xc + a), (yc + d), r, g, b);
     cb2:	ed 80       	ldd	r14, Y+5	; 0x05
     cb4:	0f 2d       	mov	r16, r15
     cb6:	21 2f       	mov	r18, r17
     cb8:	4d 85       	ldd	r20, Y+13	; 0x0d
     cba:	5e 85       	ldd	r21, Y+14	; 0x0e
     cbc:	44 0d       	add	r20, r4
     cbe:	55 1d       	adc	r21, r5
     cc0:	b5 01       	movw	r22, r10
     cc2:	c6 01       	movw	r24, r12
     cc4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
                WS2812_Draw_H_Line((xc - a), (xc + a), (yc - d), r, g, b);
     cc8:	ed 80       	ldd	r14, Y+5	; 0x05
     cca:	21 2f       	mov	r18, r17
     ccc:	a2 01       	movw	r20, r4
     cce:	6d 85       	ldd	r22, Y+13	; 0x0d
     cd0:	7e 85       	ldd	r23, Y+14	; 0x0e
     cd2:	46 1b       	sub	r20, r22
     cd4:	57 0b       	sbc	r21, r23
     cd6:	b5 01       	movw	r22, r10
     cd8:	c6 01       	movw	r24, r12
     cda:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
                WS2812_Draw_H_Line((xc - d), (xc + d), (yc + a), r, g, b);
     cde:	ed 80       	ldd	r14, Y+5	; 0x05
     ce0:	21 2f       	mov	r18, r17
     ce2:	4e 81       	ldd	r20, Y+6	; 0x06
     ce4:	5f 81       	ldd	r21, Y+7	; 0x07
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cea:	82 0d       	add	r24, r2
     cec:	93 1d       	adc	r25, r3
     cee:	9a 83       	std	Y+2, r25	; 0x02
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	bc 01       	movw	r22, r24
     cf4:	f1 01       	movw	r30, r2
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	e8 1b       	sub	r30, r24
     cfc:	f9 0b       	sbc	r31, r25
     cfe:	fc 83       	std	Y+4, r31	; 0x04
     d00:	eb 83       	std	Y+3, r30	; 0x03
     d02:	cf 01       	movw	r24, r30
     d04:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
                WS2812_Draw_H_Line((xc - d), (xc + d), (yc - a), r, g, b);
     d08:	ed 80       	ldd	r14, Y+5	; 0x05
     d0a:	21 2f       	mov	r18, r17
     d0c:	48 85       	ldd	r20, Y+8	; 0x08
     d0e:	59 85       	ldd	r21, Y+9	; 0x09
     d10:	69 81       	ldd	r22, Y+1	; 0x01
     d12:	7a 81       	ldd	r23, Y+2	; 0x02
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	0e 94 d7 03 	call	0x7ae	; 0x7ae <WS2812_Draw_H_Line>
                break;
     d1c:	59 c0       	rjmp	.+178    	; 0xdd0 <WS2812_Draw_Circle+0x18e>
            }
            
            default:
            {
                WS2812_set_colour_xy((xc + a), (yc + d), r, g, b);
     d1e:	0d 81       	ldd	r16, Y+5	; 0x05
     d20:	2f 2d       	mov	r18, r15
     d22:	41 2f       	mov	r20, r17
     d24:	ed 85       	ldd	r30, Y+13	; 0x0d
     d26:	fe 85       	ldd	r31, Y+14	; 0x0e
     d28:	e4 0d       	add	r30, r4
     d2a:	f5 1d       	adc	r31, r5
     d2c:	fa 83       	std	Y+2, r31	; 0x02
     d2e:	e9 83       	std	Y+1, r30	; 0x01
     d30:	bf 01       	movw	r22, r30
     d32:	c5 01       	movw	r24, r10
     d34:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc + d), (yc + a), r, g, b);
     d38:	0d 81       	ldd	r16, Y+5	; 0x05
     d3a:	2f 2d       	mov	r18, r15
     d3c:	41 2f       	mov	r20, r17
     d3e:	6e 81       	ldd	r22, Y+6	; 0x06
     d40:	7f 81       	ldd	r23, Y+7	; 0x07
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	82 0d       	add	r24, r2
     d48:	93 1d       	adc	r25, r3
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc - a), (yc + d), r, g, b);
     d52:	0d 81       	ldd	r16, Y+5	; 0x05
     d54:	2f 2d       	mov	r18, r15
     d56:	41 2f       	mov	r20, r17
     d58:	69 81       	ldd	r22, Y+1	; 0x01
     d5a:	7a 81       	ldd	r23, Y+2	; 0x02
     d5c:	c6 01       	movw	r24, r12
     d5e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc - d), (yc + a), r, g, b);
     d62:	0d 81       	ldd	r16, Y+5	; 0x05
     d64:	2f 2d       	mov	r18, r15
     d66:	41 2f       	mov	r20, r17
     d68:	6e 81       	ldd	r22, Y+6	; 0x06
     d6a:	7f 81       	ldd	r23, Y+7	; 0x07
     d6c:	f1 01       	movw	r30, r2
     d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d70:	9e 85       	ldd	r25, Y+14	; 0x0e
     d72:	e8 1b       	sub	r30, r24
     d74:	f9 0b       	sbc	r31, r25
     d76:	fa 83       	std	Y+2, r31	; 0x02
     d78:	e9 83       	std	Y+1, r30	; 0x01
     d7a:	cf 01       	movw	r24, r30
     d7c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc + d), (yc - a), r, g, b);
     d80:	0d 81       	ldd	r16, Y+5	; 0x05
     d82:	2f 2d       	mov	r18, r15
     d84:	41 2f       	mov	r20, r17
     d86:	68 85       	ldd	r22, Y+8	; 0x08
     d88:	79 85       	ldd	r23, Y+9	; 0x09
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc + a), (yc - d), r, g, b);
     d92:	0d 81       	ldd	r16, Y+5	; 0x05
     d94:	2f 2d       	mov	r18, r15
     d96:	41 2f       	mov	r20, r17
     d98:	f2 01       	movw	r30, r4
     d9a:	6d 85       	ldd	r22, Y+13	; 0x0d
     d9c:	7e 85       	ldd	r23, Y+14	; 0x0e
     d9e:	e6 1b       	sub	r30, r22
     da0:	f7 0b       	sbc	r31, r23
     da2:	fc 83       	std	Y+4, r31	; 0x04
     da4:	eb 83       	std	Y+3, r30	; 0x03
     da6:	bf 01       	movw	r22, r30
     da8:	c5 01       	movw	r24, r10
     daa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc - a), (yc - d), r, g, b);
     dae:	0d 81       	ldd	r16, Y+5	; 0x05
     db0:	2f 2d       	mov	r18, r15
     db2:	41 2f       	mov	r20, r17
     db4:	6b 81       	ldd	r22, Y+3	; 0x03
     db6:	7c 81       	ldd	r23, Y+4	; 0x04
     db8:	c6 01       	movw	r24, r12
     dba:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
                WS2812_set_colour_xy((xc - d), (yc - a), r, g, b);
     dbe:	0d 81       	ldd	r16, Y+5	; 0x05
     dc0:	2f 2d       	mov	r18, r15
     dc2:	41 2f       	mov	r20, r17
     dc4:	68 85       	ldd	r22, Y+8	; 0x08
     dc6:	79 85       	ldd	r23, Y+9	; 0x09
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <WS2812_set_colour_xy>
              
                break;
            }
        }

        if(p < 0)
     dd0:	99 20       	and	r9, r9
     dd2:	44 f4       	brge	.+16     	; 0xde4 <WS2812_Draw_Circle+0x1a2>
        {
           p += (3 + (2 * a++));
     dd4:	93 01       	movw	r18, r6
     dd6:	c3 01       	movw	r24, r6
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	88 0e       	add	r8, r24
     de0:	99 1e       	adc	r9, r25
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <WS2812_Draw_Circle+0x1c0>
        }
        else
        {
           p += (5 + (2 * ((a++) - (d--))));
     de4:	93 01       	movw	r18, r6
     de6:	8a 85       	ldd	r24, Y+10	; 0x0a
     de8:	9b 85       	ldd	r25, Y+11	; 0x0b
     dea:	ed 85       	ldd	r30, Y+13	; 0x0d
     dec:	fe 85       	ldd	r31, Y+14	; 0x0e
     dee:	8e 1b       	sub	r24, r30
     df0:	9f 0b       	sbc	r25, r31
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	05 96       	adiw	r24, 0x05	; 5
     df8:	88 0e       	add	r8, r24
     dfa:	99 1e       	adc	r9, r25
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	fe 87       	std	Y+14, r31	; 0x0e
     e00:	ed 87       	std	Y+13, r30	; 0x0d
     e02:	ff ef       	ldi	r31, 0xFF	; 255
     e04:	6f 1a       	sub	r6, r31
     e06:	7f 0a       	sbc	r7, r31
     e08:	41 e0       	ldi	r20, 0x01	; 1
     e0a:	c4 1a       	sub	r12, r20
     e0c:	d1 08       	sbc	r13, r1
     e0e:	5f ef       	ldi	r21, 0xFF	; 255
     e10:	a5 1a       	sub	r10, r21
     e12:	b5 0a       	sbc	r11, r21
     e14:	6e 81       	ldd	r22, Y+6	; 0x06
     e16:	7f 81       	ldd	r23, Y+7	; 0x07
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	7f 83       	std	Y+7, r23	; 0x07
     e1e:	6e 83       	std	Y+6, r22	; 0x06
     e20:	88 85       	ldd	r24, Y+8	; 0x08
     e22:	99 85       	ldd	r25, Y+9	; 0x09
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	99 87       	std	Y+9, r25	; 0x09
     e28:	88 87       	std	Y+8, r24	; 0x08
        }
    }while(a <= d);
     e2a:	ed 85       	ldd	r30, Y+13	; 0x0d
     e2c:	fe 85       	ldd	r31, Y+14	; 0x0e
     e2e:	e2 17       	cp	r30, r18
     e30:	f3 07       	cpc	r31, r19
     e32:	0c f0       	brlt	.+2      	; 0xe36 <WS2812_Draw_Circle+0x1f4>
     e34:	36 cf       	rjmp	.-404    	; 0xca2 <WS2812_Draw_Circle+0x60>
     e36:	2e 96       	adiw	r28, 0x0e	; 14
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
     e52:	bf 90       	pop	r11
     e54:	af 90       	pop	r10
     e56:	9f 90       	pop	r9
     e58:	8f 90       	pop	r8
     e5a:	7f 90       	pop	r7
     e5c:	6f 90       	pop	r6
     e5e:	5f 90       	pop	r5
     e60:	4f 90       	pop	r4
     e62:	3f 90       	pop	r3
     e64:	2f 90       	pop	r2
     e66:	08 95       	ret

00000e68 <__divmodhi4>:
     e68:	97 fb       	bst	r25, 7
     e6a:	07 2e       	mov	r0, r23
     e6c:	16 f4       	brtc	.+4      	; 0xe72 <__divmodhi4+0xa>
     e6e:	00 94       	com	r0
     e70:	07 d0       	rcall	.+14     	; 0xe80 <__divmodhi4_neg1>
     e72:	77 fd       	sbrc	r23, 7
     e74:	09 d0       	rcall	.+18     	; 0xe88 <__divmodhi4_neg2>
     e76:	0e 94 48 07 	call	0xe90	; 0xe90 <__udivmodhi4>
     e7a:	07 fc       	sbrc	r0, 7
     e7c:	05 d0       	rcall	.+10     	; 0xe88 <__divmodhi4_neg2>
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__divmodhi4_exit>

00000e80 <__divmodhi4_neg1>:
     e80:	90 95       	com	r25
     e82:	81 95       	neg	r24
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__divmodhi4_neg2>:
     e88:	70 95       	com	r23
     e8a:	61 95       	neg	r22
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000e8e <__divmodhi4_exit>:
     e8e:	08 95       	ret

00000e90 <__udivmodhi4>:
     e90:	aa 1b       	sub	r26, r26
     e92:	bb 1b       	sub	r27, r27
     e94:	51 e1       	ldi	r21, 0x11	; 17
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <__udivmodhi4_ep>

00000e98 <__udivmodhi4_loop>:
     e98:	aa 1f       	adc	r26, r26
     e9a:	bb 1f       	adc	r27, r27
     e9c:	a6 17       	cp	r26, r22
     e9e:	b7 07       	cpc	r27, r23
     ea0:	10 f0       	brcs	.+4      	; 0xea6 <__udivmodhi4_ep>
     ea2:	a6 1b       	sub	r26, r22
     ea4:	b7 0b       	sbc	r27, r23

00000ea6 <__udivmodhi4_ep>:
     ea6:	88 1f       	adc	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	5a 95       	dec	r21
     eac:	a9 f7       	brne	.-22     	; 0xe98 <__udivmodhi4_loop>
     eae:	80 95       	com	r24
     eb0:	90 95       	com	r25
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	08 95       	ret

00000eb8 <do_rand>:
     eb8:	8f 92       	push	r8
     eba:	9f 92       	push	r9
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	68 81       	ld	r22, Y
     ed0:	79 81       	ldd	r23, Y+1	; 0x01
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	61 15       	cp	r22, r1
     ed8:	71 05       	cpc	r23, r1
     eda:	81 05       	cpc	r24, r1
     edc:	91 05       	cpc	r25, r1
     ede:	21 f4       	brne	.+8      	; 0xee8 <do_rand+0x30>
     ee0:	64 e2       	ldi	r22, 0x24	; 36
     ee2:	79 ed       	ldi	r23, 0xD9	; 217
     ee4:	8b e5       	ldi	r24, 0x5B	; 91
     ee6:	97 e0       	ldi	r25, 0x07	; 7
     ee8:	2d e1       	ldi	r18, 0x1D	; 29
     eea:	33 ef       	ldi	r19, 0xF3	; 243
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	0e 94 b8 07 	call	0xf70	; 0xf70 <__divmodsi4>
     ef4:	49 01       	movw	r8, r18
     ef6:	5a 01       	movw	r10, r20
     ef8:	9b 01       	movw	r18, r22
     efa:	ac 01       	movw	r20, r24
     efc:	a7 ea       	ldi	r26, 0xA7	; 167
     efe:	b1 e4       	ldi	r27, 0x41	; 65
     f00:	0e 94 d7 07 	call	0xfae	; 0xfae <__muluhisi3>
     f04:	6b 01       	movw	r12, r22
     f06:	7c 01       	movw	r14, r24
     f08:	ac ee       	ldi	r26, 0xEC	; 236
     f0a:	b4 ef       	ldi	r27, 0xF4	; 244
     f0c:	a5 01       	movw	r20, r10
     f0e:	94 01       	movw	r18, r8
     f10:	0e 94 e5 07 	call	0xfca	; 0xfca <__mulohisi3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	8c 0d       	add	r24, r12
     f1a:	9d 1d       	adc	r25, r13
     f1c:	ae 1d       	adc	r26, r14
     f1e:	bf 1d       	adc	r27, r15
     f20:	b7 ff       	sbrs	r27, 7
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <do_rand+0x72>
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	a1 09       	sbc	r26, r1
     f28:	b0 48       	sbci	r27, 0x80	; 128
     f2a:	88 83       	st	Y, r24
     f2c:	99 83       	std	Y+1, r25	; 0x01
     f2e:	aa 83       	std	Y+2, r26	; 0x02
     f30:	bb 83       	std	Y+3, r27	; 0x03
     f32:	9f 77       	andi	r25, 0x7F	; 127
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	bf 90       	pop	r11
     f42:	af 90       	pop	r10
     f44:	9f 90       	pop	r9
     f46:	8f 90       	pop	r8
     f48:	08 95       	ret

00000f4a <rand_r>:
     f4a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <do_rand>
     f4e:	08 95       	ret

00000f50 <rand>:
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <do_rand>
     f58:	08 95       	ret

00000f5a <srand>:
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     f62:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     f66:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     f6a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     f6e:	08 95       	ret

00000f70 <__divmodsi4>:
     f70:	05 2e       	mov	r0, r21
     f72:	97 fb       	bst	r25, 7
     f74:	1e f4       	brtc	.+6      	; 0xf7c <__divmodsi4+0xc>
     f76:	00 94       	com	r0
     f78:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__negsi2>
     f7c:	57 fd       	sbrc	r21, 7
     f7e:	07 d0       	rcall	.+14     	; 0xf8e <__divmodsi4_neg2>
     f80:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodsi4>
     f84:	07 fc       	sbrc	r0, 7
     f86:	03 d0       	rcall	.+6      	; 0xf8e <__divmodsi4_neg2>
     f88:	4e f4       	brtc	.+18     	; 0xf9c <__divmodsi4_exit>
     f8a:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__negsi2>

00000f8e <__divmodsi4_neg2>:
     f8e:	50 95       	com	r21
     f90:	40 95       	com	r20
     f92:	30 95       	com	r19
     f94:	21 95       	neg	r18
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255

00000f9c <__divmodsi4_exit>:
     f9c:	08 95       	ret

00000f9e <__negsi2>:
     f9e:	90 95       	com	r25
     fa0:	80 95       	com	r24
     fa2:	70 95       	com	r23
     fa4:	61 95       	neg	r22
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__muluhisi3>:
     fae:	0e 94 0c 08 	call	0x1018	; 0x1018 <__umulhisi3>
     fb2:	a5 9f       	mul	r26, r21
     fb4:	90 0d       	add	r25, r0
     fb6:	b4 9f       	mul	r27, r20
     fb8:	90 0d       	add	r25, r0
     fba:	a4 9f       	mul	r26, r20
     fbc:	80 0d       	add	r24, r0
     fbe:	91 1d       	adc	r25, r1
     fc0:	11 24       	eor	r1, r1
     fc2:	08 95       	ret

00000fc4 <__mulshisi3>:
     fc4:	b7 ff       	sbrs	r27, 7
     fc6:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__muluhisi3>

00000fca <__mulohisi3>:
     fca:	0e 94 d7 07 	call	0xfae	; 0xfae <__muluhisi3>
     fce:	82 1b       	sub	r24, r18
     fd0:	93 0b       	sbc	r25, r19
     fd2:	08 95       	ret

00000fd4 <__udivmodsi4>:
     fd4:	a1 e2       	ldi	r26, 0x21	; 33
     fd6:	1a 2e       	mov	r1, r26
     fd8:	aa 1b       	sub	r26, r26
     fda:	bb 1b       	sub	r27, r27
     fdc:	fd 01       	movw	r30, r26
     fde:	0d c0       	rjmp	.+26     	; 0xffa <__udivmodsi4_ep>

00000fe0 <__udivmodsi4_loop>:
     fe0:	aa 1f       	adc	r26, r26
     fe2:	bb 1f       	adc	r27, r27
     fe4:	ee 1f       	adc	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	a2 17       	cp	r26, r18
     fea:	b3 07       	cpc	r27, r19
     fec:	e4 07       	cpc	r30, r20
     fee:	f5 07       	cpc	r31, r21
     ff0:	20 f0       	brcs	.+8      	; 0xffa <__udivmodsi4_ep>
     ff2:	a2 1b       	sub	r26, r18
     ff4:	b3 0b       	sbc	r27, r19
     ff6:	e4 0b       	sbc	r30, r20
     ff8:	f5 0b       	sbc	r31, r21

00000ffa <__udivmodsi4_ep>:
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	1a 94       	dec	r1
    1004:	69 f7       	brne	.-38     	; 0xfe0 <__udivmodsi4_loop>
    1006:	60 95       	com	r22
    1008:	70 95       	com	r23
    100a:	80 95       	com	r24
    100c:	90 95       	com	r25
    100e:	9b 01       	movw	r18, r22
    1010:	ac 01       	movw	r20, r24
    1012:	bd 01       	movw	r22, r26
    1014:	cf 01       	movw	r24, r30
    1016:	08 95       	ret

00001018 <__umulhisi3>:
    1018:	a2 9f       	mul	r26, r18
    101a:	b0 01       	movw	r22, r0
    101c:	b3 9f       	mul	r27, r19
    101e:	c0 01       	movw	r24, r0
    1020:	a3 9f       	mul	r26, r19
    1022:	70 0d       	add	r23, r0
    1024:	81 1d       	adc	r24, r1
    1026:	11 24       	eor	r1, r1
    1028:	91 1d       	adc	r25, r1
    102a:	b2 9f       	mul	r27, r18
    102c:	70 0d       	add	r23, r0
    102e:	81 1d       	adc	r24, r1
    1030:	11 24       	eor	r1, r1
    1032:	91 1d       	adc	r25, r1
    1034:	08 95       	ret

00001036 <_exit>:
    1036:	f8 94       	cli

00001038 <__stop_program>:
    1038:	ff cf       	rjmp	.-2      	; 0x1038 <__stop_program>
