
mcp_adc_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000616  0000068a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000038  00000000  00000000  000006b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001610  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00001db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a7  00000000  00000000  000024e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018f  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c5  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  0000060e  0000060e  00000682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.toggle_EN 00000026  00000548  00000548  000005bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_4bit_send 0000009c  00000386  00000386  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_send 00000016  000005c6  000005c6  0000063a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_putchar 00000006  00000608  00000608  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_putstr 00000018  000005ae  000005ae  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_clear_home 0000000e  000005f0  000005f0  00000664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_goto 00000032  000004ee  000004ee  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_init 0000003a  000004b4  000004b4  00000528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.setup   00000048  0000046c  0000046c  000004e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .rodata       00000006  00800060  00000610  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .text.lcd_print_value 00000134  00000252  00000252  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 00000028  0000007a  0000007a  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.main    000001b0  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SPI_tranfer 0000000a  000005fe  000005fe  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MCP3008_init 00000014  000005dc  000005dc  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MCP3008_read 0000004a  00000422  00000422  00000496  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.libgcc.div 00000026  0000056e  0000056e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.libgcc  0000001a  00000594  00000594  00000608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.libgcc.div 00000028  00000520  00000520  00000594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	05 c3       	rjmp	.+1546   	; 0x60e <__bad_interrupt>
   4:	04 c3       	rjmp	.+1544   	; 0x60e <__bad_interrupt>
   6:	03 c3       	rjmp	.+1542   	; 0x60e <__bad_interrupt>
   8:	02 c3       	rjmp	.+1540   	; 0x60e <__bad_interrupt>
   a:	01 c3       	rjmp	.+1538   	; 0x60e <__bad_interrupt>
   c:	00 c3       	rjmp	.+1536   	; 0x60e <__bad_interrupt>
   e:	ff c2       	rjmp	.+1534   	; 0x60e <__bad_interrupt>
  10:	fe c2       	rjmp	.+1532   	; 0x60e <__bad_interrupt>
  12:	fd c2       	rjmp	.+1530   	; 0x60e <__bad_interrupt>
  14:	fc c2       	rjmp	.+1528   	; 0x60e <__bad_interrupt>
  16:	fb c2       	rjmp	.+1526   	; 0x60e <__bad_interrupt>
  18:	fa c2       	rjmp	.+1524   	; 0x60e <__bad_interrupt>
  1a:	f9 c2       	rjmp	.+1522   	; 0x60e <__bad_interrupt>
  1c:	f8 c2       	rjmp	.+1520   	; 0x60e <__bad_interrupt>
  1e:	f7 c2       	rjmp	.+1518   	; 0x60e <__bad_interrupt>
  20:	f6 c2       	rjmp	.+1516   	; 0x60e <__bad_interrupt>

00000022 <.dinit>:
  22:	00 60       	ori	r16, 0x00	; 0
  24:	00 66       	ori	r16, 0x60	; 96
  26:	00 06       	cpc	r0, r16
  28:	10 00       	.word	0x0010	; ????

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	e2 e2       	ldi	r30, 0x22	; 34
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	17 c0       	rjmp	.+46     	; 0x6c <__do_clear_bss+0x8>
  3e:	b5 91       	lpm	r27, Z+
  40:	a5 91       	lpm	r26, Z+
  42:	35 91       	lpm	r19, Z+
  44:	25 91       	lpm	r18, Z+
  46:	05 91       	lpm	r16, Z+
  48:	07 fd       	sbrc	r16, 7
  4a:	0c c0       	rjmp	.+24     	; 0x64 <__do_clear_bss>
  4c:	95 91       	lpm	r25, Z+
  4e:	85 91       	lpm	r24, Z+
  50:	ef 01       	movw	r28, r30
  52:	f9 2f       	mov	r31, r25
  54:	e8 2f       	mov	r30, r24
  56:	05 90       	lpm	r0, Z+
  58:	0d 92       	st	X+, r0
  5a:	a2 17       	cp	r26, r18
  5c:	b3 07       	cpc	r27, r19
  5e:	d9 f7       	brne	.-10     	; 0x56 <__SREG__+0x17>
  60:	fe 01       	movw	r30, r28
  62:	04 c0       	rjmp	.+8      	; 0x6c <__do_clear_bss+0x8>

00000064 <__do_clear_bss>:
  64:	1d 92       	st	X+, r1
  66:	a2 17       	cp	r26, r18
  68:	b3 07       	cpc	r27, r19
  6a:	e1 f7       	brne	.-8      	; 0x64 <__do_clear_bss>
  6c:	e9 32       	cpi	r30, 0x29	; 41
  6e:	f4 07       	cpc	r31, r20
  70:	31 f7       	brne	.-52     	; 0x3e <__SP_H__>
  72:	17 d0       	rcall	.+46     	; 0xa2 <main>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_exit>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>

Disassembly of section .text:

0000060e <__bad_interrupt>:
 60e:	f8 cc       	rjmp	.-1552   	; 0x0 <__vectors>

Disassembly of section .text.toggle_EN:

00000548 <toggle_EN>:
}


void toggle_EN(void)
{                                                
   LCD_EN_HIGH;
 548:	85 b3       	in	r24, 0x15	; 21
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	8f e9       	ldi	r24, 0x9F	; 159
 550:	9f e0       	ldi	r25, 0x0F	; 15
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <toggle_EN+0xa>
 556:	00 c0       	rjmp	.+0      	; 0x558 <toggle_EN+0x10>
 558:	00 00       	nop
   _delay_ms(2);
   LCD_EN_LOW;
 55a:	85 b3       	in	r24, 0x15	; 21
 55c:	8f 77       	andi	r24, 0x7F	; 127
 55e:	85 bb       	out	0x15, r24	; 21
 560:	8f e9       	ldi	r24, 0x9F	; 159
 562:	9f e0       	ldi	r25, 0x0F	; 15
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <toggle_EN+0x1c>
 568:	00 c0       	rjmp	.+0      	; 0x56a <toggle_EN+0x22>
 56a:	00 00       	nop
 56c:	08 95       	ret

Disassembly of section .text.LCD_4bit_send:

00000386 <LCD_4bit_send>:
    LCD_4bit_send(value);
}  
    

void LCD_4bit_send(uint8_t lcd_data)       
{
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
    unsigned char temp = 0x00;
	
	temp = (0x01 & (lcd_data >> 0x07));
	
	switch(temp)
 38a:	88 23       	and	r24, r24
 38c:	24 f4       	brge	.+8      	; 0x396 <LCD_4bit_send+0x10>
	{
		case 1:
		{
			LCD_D7_HIGH;
 38e:	8b b3       	in	r24, 0x1b	; 27
 390:	80 68       	ori	r24, 0x80	; 128
 392:	8b bb       	out	0x1b, r24	; 27
			break;
 394:	03 c0       	rjmp	.+6      	; 0x39c <LCD_4bit_send+0x16>
		}
		default:
		{
			LCD_D7_LOW;
 396:	8b b3       	in	r24, 0x1b	; 27
 398:	8f 77       	andi	r24, 0x7F	; 127
 39a:	8b bb       	out	0x1b, r24	; 27
		}
	}

    temp = (0x01 & (lcd_data >> 0x06));
	
	switch(temp)
 39c:	c6 ff       	sbrs	r28, 6
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <LCD_4bit_send+0x22>
	{
		case 1:
		{
			LCD_D6_HIGH;
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	8b bb       	out	0x1b, r24	; 27
			break;
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <LCD_4bit_send+0x28>
		}
		default:
		{
			LCD_D6_LOW;
 3a8:	8b b3       	in	r24, 0x1b	; 27
 3aa:	8f 7b       	andi	r24, 0xBF	; 191
 3ac:	8b bb       	out	0x1b, r24	; 27
		}
	}

    temp = (0x01 & (lcd_data >> 0x05));           

	switch(temp)
 3ae:	c5 ff       	sbrs	r28, 5
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <LCD_4bit_send+0x34>
	{
		case 1:
		{
			LCD_D5_HIGH;
 3b2:	8b b3       	in	r24, 0x1b	; 27
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	8b bb       	out	0x1b, r24	; 27
			break;
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <LCD_4bit_send+0x3a>
		}
		default:
		{
			LCD_D5_LOW;
 3ba:	8b b3       	in	r24, 0x1b	; 27
 3bc:	8f 7d       	andi	r24, 0xDF	; 223
 3be:	8b bb       	out	0x1b, r24	; 27
	}

   
    temp = (0x01 & (lcd_data >> 0x04));
    
	switch(temp)
 3c0:	c4 ff       	sbrs	r28, 4
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <LCD_4bit_send+0x46>
	{
		case 1:
		{
			LCD_D4_HIGH;
 3c4:	8b b3       	in	r24, 0x1b	; 27
 3c6:	80 61       	ori	r24, 0x10	; 16
 3c8:	8b bb       	out	0x1b, r24	; 27
			break;
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <LCD_4bit_send+0x4c>
		}
		default:
		{
			LCD_D4_LOW;
 3cc:	8b b3       	in	r24, 0x1b	; 27
 3ce:	8f 7e       	andi	r24, 0xEF	; 239
 3d0:	8b bb       	out	0x1b, r24	; 27
			break;
		}
	}   
                                          
    toggle_EN();
 3d2:	ba d0       	rcall	.+372    	; 0x548 <toggle_EN>
    
    temp = (0x01 & (lcd_data >> 0x03));

	switch(temp)
 3d4:	c3 ff       	sbrs	r28, 3
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <LCD_4bit_send+0x5a>
	{
		case 1:
		{
			LCD_D7_HIGH;
 3d8:	8b b3       	in	r24, 0x1b	; 27
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	8b bb       	out	0x1b, r24	; 27
			break;
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <LCD_4bit_send+0x60>
		}
		default:
		{
			LCD_D7_LOW;
 3e0:	8b b3       	in	r24, 0x1b	; 27
 3e2:	8f 77       	andi	r24, 0x7F	; 127
 3e4:	8b bb       	out	0x1b, r24	; 27
	}


    temp = (0x01 & (lcd_data >> 0x02));

	switch(temp)
 3e6:	c2 ff       	sbrs	r28, 2
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <LCD_4bit_send+0x6c>
	{
		case 1:
		{
			LCD_D6_HIGH;
 3ea:	8b b3       	in	r24, 0x1b	; 27
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8b bb       	out	0x1b, r24	; 27
			break;
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <LCD_4bit_send+0x72>
		}
		default:
		{
			LCD_D6_LOW;
 3f2:	8b b3       	in	r24, 0x1b	; 27
 3f4:	8f 7b       	andi	r24, 0xBF	; 191
 3f6:	8b bb       	out	0x1b, r24	; 27
		}
	}

    temp = (0x01 & (lcd_data >> 0x01));

	switch(temp)
 3f8:	c1 ff       	sbrs	r28, 1
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		case 1:
		{
			LCD_D5_HIGH;
 3fc:	8b b3       	in	r24, 0x1b	; 27
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	8b bb       	out	0x1b, r24	; 27
			break;
 402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		}
		default:
		{
			LCD_D5_LOW;
 404:	8b b3       	in	r24, 0x1b	; 27
 406:	8f 7d       	andi	r24, 0xDF	; 223
 408:	8b bb       	out	0x1b, r24	; 27
		}
	}
   
    temp = (0x01 & lcd_data);

	switch(temp)
 40a:	c0 ff       	sbrs	r28, 0
 40c:	04 c0       	rjmp	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		case 1:
		{
			LCD_D4_HIGH;
 40e:	8b b3       	in	r24, 0x1b	; 27
 410:	80 61       	ori	r24, 0x10	; 16
 412:	8b bb       	out	0x1b, r24	; 27
			break;
 414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		}
		default:
		{
			LCD_D4_LOW;
 416:	8b b3       	in	r24, 0x1b	; 27
 418:	8f 7e       	andi	r24, 0xEF	; 239
 41a:	8b bb       	out	0x1b, r24	; 27
			break;
		}
	}
               
    toggle_EN(); 
 41c:	95 d0       	rcall	.+298    	; 0x548 <toggle_EN>
}  
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

Disassembly of section .text.LCD_send:

000005c6 <LCD_send>:
}   

void LCD_send(uint8_t value, uint8_t type)

{                               
    switch(type)
 5c6:	61 30       	cpi	r22, 0x01	; 1
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <LCD_send+0xc>
    {                                                        
      case DAT:                                             
      {
         LCD_RS_HIGH;
 5ca:	95 b3       	in	r25, 0x15	; 21
 5cc:	90 64       	ori	r25, 0x40	; 64
 5ce:	95 bb       	out	0x15, r25	; 21
         break;
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <LCD_send+0x12>
      }
      default:
      {
         LCD_RS_LOW;
 5d2:	95 b3       	in	r25, 0x15	; 21
 5d4:	9f 7b       	andi	r25, 0xBF	; 191
 5d6:	95 bb       	out	0x15, r25	; 21
         break;
      }
    }
    
    LCD_4bit_send(value);
 5d8:	d6 de       	rcall	.-596    	; 0x386 <LCD_4bit_send>
 5da:	08 95       	ret

Disassembly of section .text.LCD_putchar:

00000608 <LCD_putchar>:
}


void LCD_putchar(char char_data) 
{
    LCD_send(char_data, DAT);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	dd df       	rcall	.-70     	; 0x5c6 <LCD_send>
 60c:	08 95       	ret

Disassembly of section .text.LCD_putstr:

000005ae <LCD_putstr>:
    toggle_EN(); 
}  


void LCD_putstr(char *lcd_string)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
    while (*lcd_string != '\0')   
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <LCD_putstr+0xc>
    {
        LCD_putchar(*lcd_string++);
 5b6:	21 96       	adiw	r28, 0x01	; 1
 5b8:	27 d0       	rcall	.+78     	; 0x608 <LCD_putchar>
}  


void LCD_putstr(char *lcd_string)
{
    while (*lcd_string != '\0')   
 5ba:	88 81       	ld	r24, Y
 5bc:	81 11       	cpse	r24, r1
 5be:	fb cf       	rjmp	.-10     	; 0x5b6 <LCD_putstr+0x8>
    {
        LCD_putchar(*lcd_string++);
    };
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

Disassembly of section .text.LCD_clear_home:

000005f0 <LCD_clear_home>:
}


void LCD_clear_home(void)
{
    LCD_send(clear_display, CMD);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	e8 df       	rcall	.-48     	; 0x5c6 <LCD_send>
    LCD_send(goto_home, CMD);
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	e5 df       	rcall	.-54     	; 0x5c6 <LCD_send>
 5fc:	08 95       	ret

Disassembly of section .text.LCD_goto:

000004ee <LCD_goto>:
}


void LCD_goto(uint8_t x_pos, uint8_t y_pos)
{                                                   
    switch(y_pos)
 4ee:	62 30       	cpi	r22, 0x02	; 2
 4f0:	49 f0       	breq	.+18     	; 0x504 <LCD_goto+0x16>
 4f2:	63 30       	cpi	r22, 0x03	; 3
 4f4:	61 f0       	breq	.+24     	; 0x50e <LCD_goto+0x20>
 4f6:	61 30       	cpi	r22, 0x01	; 1
 4f8:	79 f4       	brne	.+30     	; 0x518 <LCD_goto+0x2a>
    {
       case 1:
       {      
           LCD_send((0x80 | (line_2_y_pos + x_pos)), CMD);      
 4fa:	80 5c       	subi	r24, 0xC0	; 192
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	80 68       	ori	r24, 0x80	; 128
 500:	62 d0       	rcall	.+196    	; 0x5c6 <LCD_send>
           break;
 502:	08 95       	ret
       }      
       
       case 2:
       {      
           LCD_send((0x80 | (line_3_y_pos + x_pos)), CMD);      
 504:	8c 5e       	subi	r24, 0xEC	; 236
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 68       	ori	r24, 0x80	; 128
 50a:	5d d0       	rcall	.+186    	; 0x5c6 <LCD_send>
           break;
 50c:	08 95       	ret
       }    
       
       case 3:                                    
       {                 
           LCD_send((0x80 | (line_4_y_pos + x_pos)), CMD);      
 50e:	8c 5a       	subi	r24, 0xAC	; 172
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	80 68       	ori	r24, 0x80	; 128
 514:	58 d0       	rcall	.+176    	; 0x5c6 <LCD_send>
           break;
 516:	08 95       	ret
       }                      
       
       default:                                  
       {                  
           LCD_send((0x80 | (line_1_y_pos + x_pos)), CMD);      
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	80 68       	ori	r24, 0x80	; 128
 51c:	54 d0       	rcall	.+168    	; 0x5c6 <LCD_send>
 51e:	08 95       	ret

Disassembly of section .text.LCD_init:

000004b4 <LCD_init>:
#include "lcd.h"
                              

void LCD_init(void)
{                                                   
    LCD_RW_LOW;
 4b4:	85 b3       	in	r24, 0x15	; 21
 4b6:	8f 7d       	andi	r24, 0xDF	; 223
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	8f e9       	ldi	r24, 0x9F	; 159
 4bc:	9f e0       	ldi	r25, 0x0F	; 15
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <LCD_init+0xa>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LCD_init+0x10>
 4c4:	00 00       	nop
    _delay_ms(2);    
    toggle_EN();
 4c6:	40 d0       	rcall	.+128    	; 0x548 <toggle_EN>
 
    LCD_send(0x33, CMD);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	83 e3       	ldi	r24, 0x33	; 51
 4cc:	7c d0       	rcall	.+248    	; 0x5c6 <LCD_send>
    LCD_send(0x32, CMD);   
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	82 e3       	ldi	r24, 0x32	; 50
 4d2:	79 d0       	rcall	.+242    	; 0x5c6 <LCD_send>

    LCD_send((_4_pin_interface | _2_row_display | _5x7_dots), CMD);         
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	88 e2       	ldi	r24, 0x28	; 40
 4d8:	76 d0       	rcall	.+236    	; 0x5c6 <LCD_send>
    LCD_send((display_on | cursor_off | blink_off), CMD);     
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	8c e0       	ldi	r24, 0x0C	; 12
 4de:	73 d0       	rcall	.+230    	; 0x5c6 <LCD_send>
    LCD_send((clear_display), CMD);         
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	70 d0       	rcall	.+224    	; 0x5c6 <LCD_send>
    LCD_send((cursor_direction_inc | display_no_shift), CMD);           
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	6d d0       	rcall	.+218    	; 0x5c6 <LCD_send>
 4ec:	08 95       	ret

Disassembly of section .text.setup:

0000046c <setup>:
}


void setup(void)
{
	PORTA = 0x00;
 46c:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0xF0;
 46e:	80 ef       	ldi	r24, 0xF0	; 240
 470:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0x00;
 472:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xB0;
 474:	80 eb       	ldi	r24, 0xB0	; 176
 476:	87 bb       	out	0x17, r24	; 23
	PORTC = 0x00;
 478:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xE0;
 47a:	80 ee       	ldi	r24, 0xE0	; 224
 47c:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
 47e:	12 ba       	out	0x12, r1	; 18
	DDRD = 0x00;
 480:	11 ba       	out	0x11, r1	; 17
	PORTE = 0x00;
 482:	17 b8       	out	0x07, r1	; 7
	DDRE = 0x00;
 484:	16 b8       	out	0x06, r1	; 6
	TCCR0 = 0x00;
 486:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 488:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
 48a:	11 be       	out	0x31, r1	; 49
	TCCR1A = 0x00;
 48c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x00;
 48e:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 490:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 492:	1c bc       	out	0x2c, r1	; 44
	ICR1H = 0x00;
 494:	15 bc       	out	0x25, r1	; 37
	ICR1L = 0x00;
 496:	14 bc       	out	0x24, r1	; 36
	OCR1AH = 0x00;
 498:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 49a:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 49c:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 49e:	18 bc       	out	0x28, r1	; 40
	MCUCR = 0x00;
 4a0:	15 be       	out	0x35, r1	; 53
	EMCUCR = 0x00;
 4a2:	16 be       	out	0x36, r1	; 54
	TIMSK = 0x00;
 4a4:	19 be       	out	0x39, r1	; 57
	UCSRB = 0x00;
 4a6:	1a b8       	out	0x0a, r1	; 10
	ACSR = 0x80;
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	88 b9       	out	0x08, r24	; 8
	SPCR = 0x51;
 4ac:	81 e5       	ldi	r24, 0x51	; 81
 4ae:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
 4b0:	1e b8       	out	0x0e, r1	; 14
 4b2:	08 95       	ret

Disassembly of section .text.lcd_print_value:

00000252 <lcd_print_value>:
}


void lcd_print_value(uint8_t x_pos, uint8_t y_pos, int16_t value)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <lcd_print_value+0xa>
 25c:	00 d0       	rcall	.+0      	; 0x25e <lcd_print_value+0xc>
 25e:	00 d0       	rcall	.+0      	; 0x260 <__stack+0x1>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	18 2f       	mov	r17, r24
 266:	06 2f       	mov	r16, r22
 268:	9a 01       	movw	r18, r20
	char ch[6] = {0x20, 0x20, 0x20, 0x20, 0x20, '\0'};
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	e0 e6       	ldi	r30, 0x60	; 96
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	de 01       	movw	r26, r28
 272:	11 96       	adiw	r26, 0x01	; 1
 274:	01 90       	ld	r0, Z+
 276:	0d 92       	st	X+, r0
 278:	8a 95       	dec	r24
 27a:	e1 f7       	brne	.-8      	; 0x274 <__stack+0x15>

	if(value < 0)
 27c:	55 23       	and	r21, r21
 27e:	34 f4       	brge	.+12     	; 0x28c <__stack+0x2d>
	{
		ch[0] = 0x2D;
 280:	8d e2       	ldi	r24, 0x2D	; 45
 282:	89 83       	std	Y+1, r24	; 0x01
		value = -value;
 284:	31 95       	neg	r19
 286:	21 95       	neg	r18
 288:	31 09       	sbc	r19, r1
 28a:	02 c0       	rjmp	.+4      	; 0x290 <__stack+0x31>
	}
	else
	{
		ch[0] = 0x20;
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	89 83       	std	Y+1, r24	; 0x01
	}

	if((value > 999) && (value <= 9999))
 290:	c9 01       	movw	r24, r18
 292:	a9 01       	movw	r20, r18
 294:	48 5e       	subi	r20, 0xE8	; 232
 296:	53 40       	sbci	r21, 0x03	; 3
 298:	48 32       	cpi	r20, 0x28	; 40
 29a:	53 42       	sbci	r21, 0x23	; 35
 29c:	08 f5       	brcc	.+66     	; 0x2e0 <__stack+0x81>
	{
		ch[1] = (((value % 10000)/ 1000) + 0x30);
 29e:	60 e1       	ldi	r22, 0x10	; 16
 2a0:	77 e2       	ldi	r23, 0x27	; 39
 2a2:	65 d1       	rcall	.+714    	; 0x56e <__divmodhi4>
 2a4:	e8 ee       	ldi	r30, 0xE8	; 232
 2a6:	f3 e0       	ldi	r31, 0x03	; 3
 2a8:	bf 01       	movw	r22, r30
 2aa:	61 d1       	rcall	.+706    	; 0x56e <__divmodhi4>
 2ac:	60 5d       	subi	r22, 0xD0	; 208
 2ae:	6a 83       	std	Y+2, r22	; 0x02
		ch[2] = (((value % 1000) / 100) + 0x30);
 2b0:	c9 01       	movw	r24, r18
 2b2:	bf 01       	movw	r22, r30
 2b4:	5c d1       	rcall	.+696    	; 0x56e <__divmodhi4>
 2b6:	e4 e6       	ldi	r30, 0x64	; 100
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	bf 01       	movw	r22, r30
 2bc:	58 d1       	rcall	.+688    	; 0x56e <__divmodhi4>
 2be:	60 5d       	subi	r22, 0xD0	; 208
 2c0:	6b 83       	std	Y+3, r22	; 0x03
		ch[3] = (((value % 100) / 10) + 0x30);
 2c2:	c9 01       	movw	r24, r18
 2c4:	bf 01       	movw	r22, r30
 2c6:	53 d1       	rcall	.+678    	; 0x56e <__divmodhi4>
 2c8:	ea e0       	ldi	r30, 0x0A	; 10
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	bf 01       	movw	r22, r30
 2ce:	4f d1       	rcall	.+670    	; 0x56e <__divmodhi4>
 2d0:	60 5d       	subi	r22, 0xD0	; 208
 2d2:	6c 83       	std	Y+4, r22	; 0x04
		ch[4] = ((value % 10) + 0x30);
 2d4:	c9 01       	movw	r24, r18
 2d6:	bf 01       	movw	r22, r30
 2d8:	4a d1       	rcall	.+660    	; 0x56e <__divmodhi4>
 2da:	80 5d       	subi	r24, 0xD0	; 208
 2dc:	8d 83       	std	Y+5, r24	; 0x05
 2de:	42 c0       	rjmp	.+132    	; 0x364 <__stack+0x105>
	}
	else if((value > 99) && (value <= 999))
 2e0:	a9 01       	movw	r20, r18
 2e2:	44 56       	subi	r20, 0x64	; 100
 2e4:	51 09       	sbc	r21, r1
 2e6:	44 38       	cpi	r20, 0x84	; 132
 2e8:	53 40       	sbci	r21, 0x03	; 3
 2ea:	d8 f4       	brcc	.+54     	; 0x322 <__stack+0xc3>
	{
		ch[1] = 0x20;
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	8a 83       	std	Y+2, r24	; 0x02
		ch[2] = (((value % 1000) / 100) + 0x30);
 2f0:	c9 01       	movw	r24, r18
 2f2:	68 ee       	ldi	r22, 0xE8	; 232
 2f4:	73 e0       	ldi	r23, 0x03	; 3
 2f6:	3b d1       	rcall	.+630    	; 0x56e <__divmodhi4>
 2f8:	e4 e6       	ldi	r30, 0x64	; 100
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	bf 01       	movw	r22, r30
 2fe:	37 d1       	rcall	.+622    	; 0x56e <__divmodhi4>
 300:	60 5d       	subi	r22, 0xD0	; 208
 302:	6b 83       	std	Y+3, r22	; 0x03
		ch[3] = (((value % 100) / 10) + 0x30);
 304:	c9 01       	movw	r24, r18
 306:	bf 01       	movw	r22, r30
 308:	32 d1       	rcall	.+612    	; 0x56e <__divmodhi4>
 30a:	ea e0       	ldi	r30, 0x0A	; 10
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	bf 01       	movw	r22, r30
 310:	2e d1       	rcall	.+604    	; 0x56e <__divmodhi4>
 312:	60 5d       	subi	r22, 0xD0	; 208
 314:	6c 83       	std	Y+4, r22	; 0x04
		ch[4] = ((value % 10) + 0x30);
 316:	c9 01       	movw	r24, r18
 318:	bf 01       	movw	r22, r30
 31a:	29 d1       	rcall	.+594    	; 0x56e <__divmodhi4>
 31c:	80 5d       	subi	r24, 0xD0	; 208
 31e:	8d 83       	std	Y+5, r24	; 0x05
 320:	21 c0       	rjmp	.+66     	; 0x364 <__stack+0x105>
	}
	else if((value > 9) && (value <= 99))
 322:	0a 97       	sbiw	r24, 0x0a	; 10
 324:	8a 35       	cpi	r24, 0x5A	; 90
 326:	91 05       	cpc	r25, r1
 328:	98 f4       	brcc	.+38     	; 0x350 <__stack+0xf1>
	{
		ch[1] = 0x20;
 32a:	80 e2       	ldi	r24, 0x20	; 32
 32c:	8a 83       	std	Y+2, r24	; 0x02
		ch[2] = 0x20;
 32e:	8b 83       	std	Y+3, r24	; 0x03
		ch[3] = (((value % 100) / 10) + 0x30);
 330:	c9 01       	movw	r24, r18
 332:	64 e6       	ldi	r22, 0x64	; 100
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	1b d1       	rcall	.+566    	; 0x56e <__divmodhi4>
 338:	ea e0       	ldi	r30, 0x0A	; 10
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	bf 01       	movw	r22, r30
 33e:	17 d1       	rcall	.+558    	; 0x56e <__divmodhi4>
 340:	60 5d       	subi	r22, 0xD0	; 208
 342:	6c 83       	std	Y+4, r22	; 0x04
		ch[4] = ((value % 10) + 0x30);
 344:	c9 01       	movw	r24, r18
 346:	bf 01       	movw	r22, r30
 348:	12 d1       	rcall	.+548    	; 0x56e <__divmodhi4>
 34a:	80 5d       	subi	r24, 0xD0	; 208
 34c:	8d 83       	std	Y+5, r24	; 0x05
 34e:	0a c0       	rjmp	.+20     	; 0x364 <__stack+0x105>
	}
	else
	{
		ch[1] = 0x20;
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	8a 83       	std	Y+2, r24	; 0x02
		ch[2] = 0x20;
 354:	8b 83       	std	Y+3, r24	; 0x03
		ch[3] = 0x20;
 356:	8c 83       	std	Y+4, r24	; 0x04
		ch[4] = ((value % 10) + 0x30);
 358:	c9 01       	movw	r24, r18
 35a:	6a e0       	ldi	r22, 0x0A	; 10
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	07 d1       	rcall	.+526    	; 0x56e <__divmodhi4>
 360:	80 5d       	subi	r24, 0xD0	; 208
 362:	8d 83       	std	Y+5, r24	; 0x05
	}

	LCD_goto(x_pos, y_pos);
 364:	60 2f       	mov	r22, r16
 366:	81 2f       	mov	r24, r17
 368:	c2 d0       	rcall	.+388    	; 0x4ee <LCD_goto>
	LCD_putstr(ch);
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	1f d1       	rcall	.+574    	; 0x5ae <LCD_putstr>
 370:	26 96       	adiw	r28, 0x06	; 6
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

Disassembly of section .text.main:

000000a2 <main>:
void setup(void);
void lcd_print_value(uint8_t x_pos, uint8_t y_pos, int16_t value);


int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	a8 97       	sbiw	r28, 0x28	; 40
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
    int16_t T_value = 0x00000;
	
	char txt1[5] = {"CH0:"};
  b6:	2a e7       	ldi	r18, 0x7A	; 122
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	f9 01       	movw	r30, r18
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	74 2f       	mov	r23, r20
  c6:	66 d2       	rcall	.+1228   	; 0x594 <__movmemx_qi>
	char txt2[5] = {"CH1:"};
  c8:	2f e7       	ldi	r18, 0x7F	; 127
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	f9 01       	movw	r30, r18
  d2:	de 01       	movw	r26, r28
  d4:	16 96       	adiw	r26, 0x06	; 6
  d6:	74 2f       	mov	r23, r20
  d8:	5d d2       	rcall	.+1210   	; 0x594 <__movmemx_qi>
	char txt3[5] = {"CH2:"};
  da:	24 e8       	ldi	r18, 0x84	; 132
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	f9 01       	movw	r30, r18
  e4:	de 01       	movw	r26, r28
  e6:	1b 96       	adiw	r26, 0x0b	; 11
  e8:	74 2f       	mov	r23, r20
  ea:	54 d2       	rcall	.+1192   	; 0x594 <__movmemx_qi>
	char txt4[5] = {"CH3:"};		
  ec:	29 e8       	ldi	r18, 0x89	; 137
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	f9 01       	movw	r30, r18
  f6:	de 01       	movw	r26, r28
  f8:	50 96       	adiw	r26, 0x10	; 16
  fa:	74 2f       	mov	r23, r20
  fc:	4b d2       	rcall	.+1174   	; 0x594 <__movmemx_qi>
	char txt5[5] = {"CH4:"};
  fe:	2e e8       	ldi	r18, 0x8E	; 142
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	f9 01       	movw	r30, r18
 108:	de 01       	movw	r26, r28
 10a:	55 96       	adiw	r26, 0x15	; 21
 10c:	74 2f       	mov	r23, r20
 10e:	42 d2       	rcall	.+1156   	; 0x594 <__movmemx_qi>
	char txt6[5] = {"CH5:"};
 110:	23 e9       	ldi	r18, 0x93	; 147
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	f9 01       	movw	r30, r18
 11a:	de 01       	movw	r26, r28
 11c:	5a 96       	adiw	r26, 0x1a	; 26
 11e:	74 2f       	mov	r23, r20
 120:	39 d2       	rcall	.+1138   	; 0x594 <__movmemx_qi>
	char txt7[5] = {"CH6:"};
 122:	28 e9       	ldi	r18, 0x98	; 152
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	f9 01       	movw	r30, r18
 12c:	de 01       	movw	r26, r28
 12e:	5f 96       	adiw	r26, 0x1f	; 31
 130:	74 2f       	mov	r23, r20
 132:	30 d2       	rcall	.+1120   	; 0x594 <__movmemx_qi>
	char txt8[5] = {"CH7:"};
 134:	2d e9       	ldi	r18, 0x9D	; 157
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	f9 01       	movw	r30, r18
 13e:	de 01       	movw	r26, r28
 140:	94 96       	adiw	r26, 0x24	; 36
 142:	74 2f       	mov	r23, r20
 144:	27 d2       	rcall	.+1102   	; 0x594 <__movmemx_qi>
	
	setup();
 146:	92 d1       	rcall	.+804    	; 0x46c <setup>
	
	LCD_init();
 148:	b5 d1       	rcall	.+874    	; 0x4b4 <LCD_init>
	LCD_clear_home();
 14a:	52 d2       	rcall	.+1188   	; 0x5f0 <LCD_clear_home>
	MCP3008_init();
 14c:	47 d2       	rcall	.+1166   	; 0x5dc <MCP3008_init>
	
	LCD_goto(0, 0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	cd d1       	rcall	.+922    	; 0x4ee <LCD_goto>
	LCD_putstr(txt1);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	2a d2       	rcall	.+1108   	; 0x5ae <LCD_putstr>
	LCD_goto(0, 1);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	c7 d1       	rcall	.+910    	; 0x4ee <LCD_goto>
	LCD_putstr(txt2);
 160:	ce 01       	movw	r24, r28
 162:	06 96       	adiw	r24, 0x06	; 6
 164:	24 d2       	rcall	.+1096   	; 0x5ae <LCD_putstr>
	LCD_goto(0, 2);
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	c1 d1       	rcall	.+898    	; 0x4ee <LCD_goto>
	LCD_putstr(txt3);
 16c:	ce 01       	movw	r24, r28
 16e:	0b 96       	adiw	r24, 0x0b	; 11
 170:	1e d2       	rcall	.+1084   	; 0x5ae <LCD_putstr>
	LCD_goto(0, 3);
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	bb d1       	rcall	.+886    	; 0x4ee <LCD_goto>
	LCD_putstr(txt4);	
 178:	ce 01       	movw	r24, r28
 17a:	40 96       	adiw	r24, 0x10	; 16
 17c:	18 d2       	rcall	.+1072   	; 0x5ae <LCD_putstr>
	LCD_goto(11, 0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	b5 d1       	rcall	.+874    	; 0x4ee <LCD_goto>
	LCD_putstr(txt5);
 184:	ce 01       	movw	r24, r28
 186:	45 96       	adiw	r24, 0x15	; 21
 188:	12 d2       	rcall	.+1060   	; 0x5ae <LCD_putstr>
	LCD_goto(11, 1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	8b e0       	ldi	r24, 0x0B	; 11
 18e:	af d1       	rcall	.+862    	; 0x4ee <LCD_goto>
	LCD_putstr(txt6);
 190:	ce 01       	movw	r24, r28
 192:	4a 96       	adiw	r24, 0x1a	; 26
 194:	0c d2       	rcall	.+1048   	; 0x5ae <LCD_putstr>
	LCD_goto(11, 2);
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	8b e0       	ldi	r24, 0x0B	; 11
 19a:	a9 d1       	rcall	.+850    	; 0x4ee <LCD_goto>
	LCD_putstr(txt7);
 19c:	ce 01       	movw	r24, r28
 19e:	4f 96       	adiw	r24, 0x1f	; 31
 1a0:	06 d2       	rcall	.+1036   	; 0x5ae <LCD_putstr>
	LCD_goto(11, 3);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	a3 d1       	rcall	.+838    	; 0x4ee <LCD_goto>
	LCD_putstr(txt8);
 1a8:	ce 01       	movw	r24, r28
 1aa:	84 96       	adiw	r24, 0x24	; 36
 1ac:	00 d2       	rcall	.+1024   	; 0x5ae <LCD_putstr>
	
	while(1)
    {
		T_value = MCP3008_read(MCP3008_S_CH0, MCP3008_SINGLE_MODE);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	37 d1       	rcall	.+622    	; 0x422 <MCP3008_read>
		lcd_print_value(4, 0, (T_value >> 1));
 1b4:	ac 01       	movw	r20, r24
 1b6:	55 95       	asr	r21
 1b8:	47 95       	ror	r20
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	49 d0       	rcall	.+146    	; 0x252 <lcd_print_value>
		
		T_value = MCP3008_read(MCP3008_S_CH1, MCP3008_SINGLE_MODE);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	80 e9       	ldi	r24, 0x90	; 144
 1c4:	2e d1       	rcall	.+604    	; 0x422 <MCP3008_read>
		lcd_print_value(4, 1, (T_value >> 1));
 1c6:	ac 01       	movw	r20, r24
 1c8:	55 95       	asr	r21
 1ca:	47 95       	ror	r20
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	40 d0       	rcall	.+128    	; 0x252 <lcd_print_value>
		
		T_value = MCP3008_read(MCP3008_S_CH2, MCP3008_SINGLE_MODE);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 ea       	ldi	r24, 0xA0	; 160
 1d6:	25 d1       	rcall	.+586    	; 0x422 <MCP3008_read>
		lcd_print_value(4, 2, (T_value >> 1));
 1d8:	ac 01       	movw	r20, r24
 1da:	55 95       	asr	r21
 1dc:	47 95       	ror	r20
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	37 d0       	rcall	.+110    	; 0x252 <lcd_print_value>

		T_value = MCP3008_read(MCP3008_S_CH3, MCP3008_SINGLE_MODE);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 eb       	ldi	r24, 0xB0	; 176
 1e8:	1c d1       	rcall	.+568    	; 0x422 <MCP3008_read>
		lcd_print_value(4, 3, (T_value >> 1));
 1ea:	ac 01       	movw	r20, r24
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	63 e0       	ldi	r22, 0x03	; 3
 1f2:	84 e0       	ldi	r24, 0x04	; 4
 1f4:	2e d0       	rcall	.+92     	; 0x252 <lcd_print_value>
		
		T_value = MCP3008_read(MCP3008_S_CH4, MCP3008_SINGLE_MODE);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	13 d1       	rcall	.+550    	; 0x422 <MCP3008_read>
		lcd_print_value(15, 0, (T_value >> 1));
 1fc:	ac 01       	movw	r20, r24
 1fe:	55 95       	asr	r21
 200:	47 95       	ror	r20
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	25 d0       	rcall	.+74     	; 0x252 <lcd_print_value>

		T_value = MCP3008_read(MCP3008_S_CH5, MCP3008_SINGLE_MODE);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	80 ed       	ldi	r24, 0xD0	; 208
 20c:	0a d1       	rcall	.+532    	; 0x422 <MCP3008_read>
		lcd_print_value(15, 1, (T_value >> 1));
 20e:	ac 01       	movw	r20, r24
 210:	55 95       	asr	r21
 212:	47 95       	ror	r20
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	1c d0       	rcall	.+56     	; 0x252 <lcd_print_value>

		T_value = MCP3008_read(MCP3008_S_CH6, MCP3008_SINGLE_MODE);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 ee       	ldi	r24, 0xE0	; 224
 21e:	01 d1       	rcall	.+514    	; 0x422 <MCP3008_read>
		lcd_print_value(15, 2, (T_value >> 1));
 220:	ac 01       	movw	r20, r24
 222:	55 95       	asr	r21
 224:	47 95       	ror	r20
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	13 d0       	rcall	.+38     	; 0x252 <lcd_print_value>

		T_value = MCP3008_read(MCP3008_S_CH7, MCP3008_SINGLE_MODE);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	80 ef       	ldi	r24, 0xF0	; 240
 230:	f8 d0       	rcall	.+496    	; 0x422 <MCP3008_read>
		lcd_print_value(15, 3, (T_value >> 1));
 232:	ac 01       	movw	r20, r24
 234:	55 95       	asr	r21
 236:	47 95       	ror	r20
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	8f e0       	ldi	r24, 0x0F	; 15
 23c:	0a d0       	rcall	.+20     	; 0x252 <lcd_print_value>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	80 e7       	ldi	r24, 0x70	; 112
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
 250:	ae cf       	rjmp	.-164    	; 0x1ae <main+0x10c>

Disassembly of section .text.SPI_tranfer:

000005fe <SPI_tranfer>:
#include "MCP3008.h"


uint8_t SPI_tranfer(uint8_t value)
{
	SPDR = value;
 5fe:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1 << SPIF)));
 600:	77 9b       	sbis	0x0e, 7	; 14
 602:	fe cf       	rjmp	.-4      	; 0x600 <SPI_tranfer+0x2>

	return SPDR;
 604:	8f b1       	in	r24, 0x0f	; 15
}
 606:	08 95       	ret

Disassembly of section .text.MCP3008_init:

000005dc <MCP3008_init>:


void MCP3008_init(void)
{
    PORTB = 0x00;
 5dc:	18 ba       	out	0x18, r1	; 24
    DDRB = 0xB0;
 5de:	80 eb       	ldi	r24, 0xB0	; 176
 5e0:	87 bb       	out	0x17, r24	; 23
    
    SPCR = 0x51;
 5e2:	81 e5       	ldi	r24, 0x51	; 81
 5e4:	8d b9       	out	0x0d, r24	; 13
    SPSR = 0x00;
 5e6:	1e b8       	out	0x0e, r1	; 14
	
	MCP3008_CS_HIGH;
 5e8:	88 b3       	in	r24, 0x18	; 24
 5ea:	80 61       	ori	r24, 0x10	; 16
 5ec:	88 bb       	out	0x18, r24	; 24
 5ee:	08 95       	ret

Disassembly of section .text.MCP3008_read:

00000422 <MCP3008_read>:
}


int16_t MCP3008_read(uint8_t channel, uint8_t type)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	c8 2f       	mov	r28, r24
 428:	d6 2f       	mov	r29, r22
     uint8_t LB = 0x00;
     uint8_t HB = 0x00;
     int16_t value = 0x0000;
     
     MCP3008_CS_LOW;
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	8f 7e       	andi	r24, 0xEF	; 239
 42e:	88 bb       	out	0x18, r24	; 24
     
     SPI_tranfer(MCP3008_Start);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	e5 d0       	rcall	.+458    	; 0x5fe <SPI_tranfer>
     HB = SPI_tranfer(channel);
 434:	8c 2f       	mov	r24, r28
 436:	e3 d0       	rcall	.+454    	; 0x5fe <SPI_tranfer>
 438:	c8 2f       	mov	r28, r24
     LB = SPI_tranfer(0x00);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	e0 d0       	rcall	.+448    	; 0x5fe <SPI_tranfer>
     
     MCP3008_CS_HIGH;
 43e:	98 b3       	in	r25, 0x18	; 24
 440:	90 61       	ori	r25, 0x10	; 16
 442:	98 bb       	out	0x18, r25	; 24
     
     value = ((int16_t)HB);
 444:	2c 2f       	mov	r18, r28
 446:	30 e0       	ldi	r19, 0x00	; 0
     value <<= 0x08;
 448:	32 2f       	mov	r19, r18
 44a:	22 27       	eor	r18, r18
     value |= ((int16_t)LB);
 44c:	28 2b       	or	r18, r24
     
     switch(type)
 44e:	d1 30       	cpi	r29, 0x01	; 1
 450:	19 f4       	brne	.+6      	; 0x458 <MCP3008_read+0x36>
     {
         case MCP3008_SINGLE_MODE:
         {
             value &= 0x03FF;
 452:	c9 01       	movw	r24, r18
 454:	93 70       	andi	r25, 0x03	; 3
             break;
 456:	07 c0       	rjmp	.+14     	; 0x466 <MCP3008_read+0x44>
         }

         default:
         {
             value &= 0x07FF;
 458:	c9 01       	movw	r24, r18
 45a:	97 70       	andi	r25, 0x07	; 7
             
             if((value & 0x0400) != 0x0000)
 45c:	32 ff       	sbrs	r19, 2
 45e:	03 c0       	rjmp	.+6      	; 0x466 <MCP3008_read+0x44>
             {
                 value = -value;
 460:	91 95       	neg	r25
 462:	81 95       	neg	r24
 464:	91 09       	sbc	r25, r1
             break;
         }
     }     

     return value;
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000056e <__divmodhi4>:
 56e:	97 fb       	bst	r25, 7
 570:	07 2e       	mov	r0, r23
 572:	16 f4       	brtc	.+4      	; 0x578 <__divmodhi4+0xa>
 574:	00 94       	com	r0
 576:	06 d0       	rcall	.+12     	; 0x584 <__divmodhi4_neg1>
 578:	77 fd       	sbrc	r23, 7
 57a:	08 d0       	rcall	.+16     	; 0x58c <__divmodhi4_neg2>
 57c:	d1 df       	rcall	.-94     	; 0x520 <__udivmodhi4>
 57e:	07 fc       	sbrc	r0, 7
 580:	05 d0       	rcall	.+10     	; 0x58c <__divmodhi4_neg2>
 582:	3e f4       	brtc	.+14     	; 0x592 <__divmodhi4_exit>

00000584 <__divmodhi4_neg1>:
 584:	90 95       	com	r25
 586:	81 95       	neg	r24
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__divmodhi4_neg2>:
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255

00000592 <__divmodhi4_exit>:
 592:	08 95       	ret

Disassembly of section .text.libgcc:

00000594 <__movmemx_qi>:
 594:	99 27       	eor	r25, r25

00000596 <__movmemx_hi>:
 596:	77 fd       	sbrc	r23, 7
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__movmemx_hi+0xe>
 59a:	05 90       	lpm	r0, Z+
 59c:	0d 92       	st	X+, r0
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	e1 f7       	brne	.-8      	; 0x59a <__movmemx_hi+0x4>
 5a2:	08 95       	ret
 5a4:	01 90       	ld	r0, Z+
 5a6:	0d 92       	st	X+, r0
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <__movmemx_hi+0xe>
 5ac:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000520 <__udivmodhi4>:
 520:	aa 1b       	sub	r26, r26
 522:	bb 1b       	sub	r27, r27
 524:	51 e1       	ldi	r21, 0x11	; 17
 526:	07 c0       	rjmp	.+14     	; 0x536 <__udivmodhi4_ep>

00000528 <__udivmodhi4_loop>:
 528:	aa 1f       	adc	r26, r26
 52a:	bb 1f       	adc	r27, r27
 52c:	a6 17       	cp	r26, r22
 52e:	b7 07       	cpc	r27, r23
 530:	10 f0       	brcs	.+4      	; 0x536 <__udivmodhi4_ep>
 532:	a6 1b       	sub	r26, r22
 534:	b7 0b       	sbc	r27, r23

00000536 <__udivmodhi4_ep>:
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	5a 95       	dec	r21
 53c:	a9 f7       	brne	.-22     	; 0x528 <__udivmodhi4_loop>
 53e:	80 95       	com	r24
 540:	90 95       	com	r25
 542:	bc 01       	movw	r22, r24
 544:	cd 01       	movw	r24, r26
 546:	08 95       	ret
